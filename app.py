import streamlit as st
import random
import numpy as np
from enum import Enum

class Tile(Enum):
    WALL = '#'
    FLOOR = '.'
    PLAYER = '@'
    ENEMY = 'E'
    ITEM = '!'
    EXIT = 'X'

class QuestType(Enum):
    KILL = "–£–±–∏—Ç—å"
    COLLECT = "–ù–∞–π—Ç–∏"

class Direction(Enum):
    UP = (-1, 0)
    DOWN = (1, 0)
    LEFT = (0, -1)
    RIGHT = (0, 1)

def generate_cave(width, height, fill_prob=0.4):
    grid = np.random.choice([0, 1], size=(height, width), p=[1-fill_prob, fill_prob])
    
    for _ in range(5):
        new_grid = grid.copy()
        for y in range(height):
            for x in range(width):
                neighbors = np.sum(grid[max(0, y-1):min(height, y+2), max(0, x-1):min(width, x+2)]) - grid[y, x]
                if grid[y, x] == 1:
                    new_grid[y, x] = 1 if neighbors >= 3 else 0
                else:
                    new_grid[y, x] = 1 if neighbors >= 5 else 0
        grid = new_grid
    
    return grid

def create_map(width, height):
    cave = generate_cave(width, height)
    map_data = []
    
    for row in cave:
        map_row = []
        for cell in row:
            map_row.append(Tile.WALL if cell == 1 else Tile.FLOOR)
        map_data.append(map_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –≤—ã—Ö–æ–¥ –∏ —Å–ª—É—á–∞–π–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    empty_cells = [(y, x) for y in range(height) for x in range(width) if map_data[y][x] == Tile.FLOOR]
    
    if empty_cells:
        player_pos = random.choice(empty_cells)
        map_data[player_pos[0]][player_pos[1]] = Tile.PLAYER
        empty_cells.remove(player_pos)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ö–æ–¥
        if empty_cells:
            exit_pos = random.choice(empty_cells)
            map_data[exit_pos[0]][exit_pos[1]] = Tile.EXIT
            empty_cells.remove(exit_pos)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã
        num_entities = min(5, len(empty_cells) // 2)
        for _ in range(num_entities):
            if empty_cells:
                pos = random.choice(empty_cells)
                map_data[pos[0]][pos[1]] = Tile.ENEMY
                empty_cells.remove(pos)
            
            if empty_cells:
                pos = random.choice(empty_cells)
                map_data[pos[0]][pos[1]] = Tile.ITEM
                empty_cells.remove(pos)
    
    return map_data, player_pos

def generate_quest():
    quest_type = random.choice(list(QuestType))
    target = random.choice(["–ì–æ–±–ª–∏–Ω–∞", "–î—Ä–∞–∫–æ–Ω–∞", "–°–∫–µ–ª–µ—Ç–∞", "–í–æ–ª—à–µ–±–Ω–∏–∫–∞"] if quest_type == QuestType.KILL else
                          ["–º–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—á", "–¥—Ä–µ–≤–Ω–∏–π —Å–≤–∏—Ç–æ–∫", "—ç–ª–∏–∫—Å–∏—Ä –∑–¥–æ—Ä–æ–≤—å—è", "–∑–æ–ª–æ—Ç–æ–π –∫–ª—é—á"])
    return {
        "type": quest_type,
        "target": target,
        "completed": False
    }

def move_player(map_data, player_pos, direction):
    y, x = player_pos
    dy, dx = direction.value
    new_y, new_x = y + dy, x + dx
    
    if 0 <= new_y < len(map_data) and 0 <= new_x < len(map_data[0]):
        if map_data[new_y][new_x] in [Tile.FLOOR, Tile.ENEMY, Tile.ITEM, Tile.EXIT]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–∞–π–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥–∏–º (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–µ—Å—Ç–∞)
            target_tile = map_data[new_y][new_x]
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–∞
            map_data[y][x] = Tile.FLOOR
            map_data[new_y][new_x] = Tile.PLAYER
            
            return (new_y, new_x), target_tile
    return player_pos, None

def check_quest_progress(quest, target_tile):
    if target_tile is None:
        return None
        
    if quest["type"] == QuestType.KILL and target_tile == Tile.ENEMY:
        quest["completed"] = True
        return f"–í—ã —É–±–∏–ª–∏ –≤—Ä–∞–≥–∞! –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!"
    
    elif quest["type"] == QuestType.COLLECT and target_tile == Tile.ITEM:
        quest["completed"] = True
        return f"–í—ã –Ω–∞—à–ª–∏ –ø—Ä–µ–¥–º–µ—Ç! –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!"
    
    elif target_tile == Tile.EXIT:
        if quest["completed"]:
            return "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –Ω–∞—à–ª–∏ –≤—ã—Ö–æ–¥!"
        else:
            return "–í—ã—Ö–æ–¥ –Ω–∞–π–¥–µ–Ω, –Ω–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!"
    
    return None

def render_map(map_data):
    return "\n".join("".join(tile.value for tile in row) for row in map_data)

def main():
    st.title("üó°Ô∏è Roguelike –ò–≥—Ä–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    if "game_initialized" not in st.session_state:
        st.session_state.map, st.session_state.player_pos = create_map(20, 10)
        st.session_state.quest = generate_quest()
        st.session_state.message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è."
        st.session_state.game_initialized = True
        st.session_state.game_over = False
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    st.subheader("–ö–∞—Ä—Ç–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è")
    map_display = render_map(st.session_state.map)
    st.text_area("", map_display, height=300, key="map_display")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    st.subheader("üìú –ó–∞–¥–∞–Ω–∏–µ")
    quest = st.session_state.quest
    quest_text = f"{quest['type'].value} {quest['target']}"
    
    if quest["completed"]:
        st.success(f"‚úÖ {quest_text} - –í–´–ü–û–õ–ù–ï–ù–û!")
        st.info("–ù–∞–π–¥–∏—Ç–µ –≤—ã—Ö–æ–¥ (X) —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É!")
    else:
        st.warning(f"üéØ {quest_text}")
    
    # –õ–µ–≥–µ–Ω–¥–∞
    st.subheader("üìñ –õ–µ–≥–µ–Ω–¥–∞")
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        st.text("@ - –ò–≥—Ä–æ–∫")
    with col2:
        st.text("# - –°—Ç–µ–Ω–∞")
    with col3:
        st.text(". - –ü–æ–ª")
    with col4:
        st.text("E - –í—Ä–∞–≥")
    with col5:
        st.text("! - –ü—Ä–µ–¥–º–µ—Ç")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    st.subheader("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    # –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col2:
        if st.button("‚Üë –í–≤–µ—Ä—Ö", key="up", use_container_width=True):
            if not st.session_state.game_over:
                new_pos, target_tile = move_player(st.session_state.map, st.session_state.player_pos, Direction.UP)
                st.session_state.player_pos = new_pos
                
                message = check_quest_progress(st.session_state.quest, target_tile)
                if message:
                    st.session_state.message = message
                    if target_tile == Tile.EXIT and st.session_state.quest["completed"]:
                        st.session_state.game_over = True
    
    # –°—Ä–µ–¥–Ω–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        if st.button("‚Üê –õ–µ–≤–æ", key="left", use_container_width=True):
            if not st.session_state.game_over:
                new_pos, target_tile = move_player(st.session_state.map, st.session_state.player_pos, Direction.LEFT)
                st.session_state.player_pos = new_pos
                
                message = check_quest_progress(st.session_state.quest, target_tile)
                if message:
                    st.session_state.message = message
                    if target_tile == Tile.EXIT and st.session_state.quest["completed"]:
                        st.session_state.game_over = True
    
    with col3:
        if st.button("‚Üí –ü—Ä–∞–≤–æ", key="right", use_container_width=True):
            if not st.session_state.game_over:
                new_pos, target_tile = move_player(st.session_state.map, st.session_state.player_pos, Direction.RIGHT)
                st.session_state.player_pos = new_pos
                
                message = check_quest_progress(st.session_state.quest, target_tile)
                if message:
                    st.session_state.message = message
                    if target_tile == Tile.EXIT and st.session_state.quest["completed"]:
                        st.session_state.game_over = True
    
    # –ù–∏–∂–Ω–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col2:
        if st.button("‚Üì –í–Ω–∏–∑", key="down", use_container_width=True):
            if not st.session_state.game_over:
                new_pos, target_tile = move_player(st.session_state.map, st.session_state.player_pos, Direction.DOWN)
                st.session_state.player_pos = new_pos
                
                message = check_quest_progress(st.session_state.quest, target_tile)
                if message:
                    st.session_state.message = message
                    if target_tile == Tile.EXIT and st.session_state.quest["completed"]:
                        st.session_state.game_over = True
    
    # –°–æ–æ–±—â–µ–Ω–∏—è
    st.subheader("üì¢ –°–æ–±—ã—Ç–∏—è")
    if st.session_state.game_over:
        st.balloons()
        st.success(st.session_state.message)
        st.success("üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
    else:
        st.info(st.session_state.message)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π
    st.subheader("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π")
    if st.button("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞"):
        st.session_state.map, st.session_state.player_pos = create_map(20, 10)
        st.session_state.quest = generate_quest()
        st.session_state.message = "–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è."
        st.session_state.game_over = False
        st.rerun()
    
    if st.button("üîç –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
        st.rerun()

if __name__ == "__main__":
    main()
