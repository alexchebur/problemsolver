import streamlit as st
import google.generativeai as genai
import time
import traceback
from docx import Document
from io import BytesIO
from fpdf import FPDF
import base64
import os
from duckduckgo_search import DDGS
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API
api_key = st.secrets['GEMINI_API_KEY']
if not api_key:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á")
    st.stop()

genai.configure(
    api_key=api_key,
    transport='rest',
    client_options={
        'api_endpoint': 'generativelanguage.googleapis.com/'
    }
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'current_doc_text' not in st.session_state:
    st.session_state.current_doc_text = ""
if 'processing' not in st.session_state:
    st.session_state.processing = False
if 'report_content' not in st.session_state:
    st.session_state.report_content = None
if 'problem_formulation' not in st.session_state:
    st.session_state.problem_formulation = ""
if 'generated_queries' not in st.session_state:
    st.session_state.generated_queries = []
if 'search_results' not in st.session_state:
    st.session_state.search_results = ""

# –ú–æ–¥–µ–ª—å
model = genai.GenerativeModel('gemini-2.0-flash')

# –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏
CORE_METHODS = [
    "First Principles Thinking",
    "Pareto Principle (80/20 Rule)",
    "Occam‚Äôs Razor",
    "System 1 vs System 2 Thinking",
    "Second-Order Thinking"
]

ADDITIONAL_METHODS = [
    "Inversion (thinking backwards)",
    "Opportunity Cost",
    "Margin of Diminishing Returns",
    "Hanlon‚Äôs Razor",
    "Confirmation Bias",
    "Availability Heuristic",
    "Parkinson‚Äôs Law",
    "Loss Aversion",
    "Switching Costs",
    "Circle of Competence",
    "Regret Minimization",
    "Leverage Points",
    "Lindy Effect",
    "Game Theory",
    "Antifragility",
    "–¢–µ–æ—Ä–∏–∏ –†–µ—à–µ–Ω–∏—è –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á"
]

def get_current_date():
    return datetime.now().strftime("%Y-%m-%d")

def perform_search(query, region='ru-ru', max_results=8, max_snippet_length=3000):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    try:
        with DDGS() as ddgs:
            results = []
            st.sidebar.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            
            for r in ddgs.text(
                query,
                region=region,
                max_results=max_results,
                backend="lite"
            ):
                snippet = r['body'][:500] + "..." if len(r['body']) > 500 else r['body']
                results.append(r)
                
                with st.sidebar.expander(f"üîç {r['title']}"):
                    st.write(snippet)
                    st.caption(f"URL: {r['href']}")

            formatted = []
            for i, r in enumerate(results, 1):
                body = r['body'][:max_snippet_length] + "..." if len(r['body']) > max_snippet_length else r['body']
                formatted.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {r['title']}\n{body}\nURL: {r['href']}\n")
            
            return "\n\n".join(formatted)
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

def parse_docx(uploaded_file):
    try:
        if uploaded_file is None:
            return False

        doc = Document(BytesIO(uploaded_file.getvalue()))
        full_text = "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
        st.session_state.current_doc_text = full_text[:300000]
        st.success(f"üìÇ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(st.session_state.current_doc_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return True
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        st.session_state.current_doc_text = ""
        return False

def create_pdf(content, title="–û—Ç—á–µ—Ç"):
    try:
        pdf = FPDF()
        pdf.add_page()
        font_path = "fonts/DejaVuSansCondensed.ttf"
        
        if not os.path.exists(font_path):
            st.error(f"üö´ –§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {font_path}")
            return None
        
        pdf.add_font('DejaVu', '', font_path, uni=True)
        pdf.set_font('DejaVu', '', 12)
        effective_width = 190
        
        paragraphs = content.split('\n')
        
        for para in paragraphs:
            if not para.strip():
                pdf.ln(6)
                continue
                
            words = para.split()
            current_line = ""
            
            for word in words:
                test_line = current_line + " " + word if current_line else word
                if pdf.get_string_width(test_line) <= effective_width:
                    current_line = test_line
                else:
                    pdf.cell(0, 10, txt=current_line, ln=1)
                    current_line = word
            
            if current_line:
                pdf.cell(0, 10, txt=current_line, ln=1)
            
            pdf.ln(4)
        
        buffer = BytesIO()
        pdf.output(buffer)
        return buffer.getvalue()
    
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")
        return None

def formulate_problem_and_queries():
    """–≠—Ç–∞–ø 1: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = st.session_state.input_query.strip()
    doc_text = st.session_state.current_doc_text[:300000]
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è LLM
    prompt = f"""
    –í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å):
    
    –ó–∞–ø—Ä–æ—Å: {query}
    –î–æ–∫—É–º–µ–Ω—Ç: {doc_text if doc_text else "–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞"}
    
    –í–∞—à–∏ –∑–∞–¥–∞—á–∏:
    1. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∫–ª—é—á–µ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É
    2. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–ª–æ–≥ (–≤–æ–ø—Ä–æ—Å—ã, –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–º–Ω–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ –∏ –æ—Ç–≤–µ—Ç—ã)
    3. –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ 5 –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    4. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ First Principles Thinking –∏ System 2 Thinking
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –í—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å: 
        –ü–†–û–ë–õ–ï–ú–ê: ... 
        –í–ù–£–¢–†–ï–ù–ù–ò–ô –î–ò–ê–õ–û–ì: ...
        –ó–ê–ü–†–û–°–´:
        1. ...
        2. ...
        ...
    - –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –¥–ª—è –ø–æ–∏—Å–∫–∞
    """
    
    try:
        response = model.generate_content(
            prompt,
            generation_config={
                "temperature": st.session_state.temperature,
                "max_output_tokens": 4000
            },
            request_options={'timeout': 120}
        )
        
        result = response.text
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        problem = ""
        internal_dialog = ""
        queries = []
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if "–ü–†–û–ë–õ–ï–ú–ê:" in result:
            problem_part = result.split("–ü–†–û–ë–õ–ï–ú–ê:")[1]
            if "–í–ù–£–¢–†–ï–ù–ù–ò–ô –î–ò–ê–õ–û–ì:" in problem_part:
                problem = problem_part.split("–í–ù–£–¢–†–ï–ù–ù–ò–ô –î–ò–ê–õ–û–ì:")[0].strip()
                internal_dialog_part = problem_part.split("–í–ù–£–¢–†–ï–ù–ù–ò–ô –î–ò–ê–õ–û–ì:")[1]
                if "–ó–ê–ü–†–û–°–´:" in internal_dialog_part:
                    internal_dialog = internal_dialog_part.split("–ó–ê–ü–†–û–°–´:")[0].strip()
                    queries_part = internal_dialog_part.split("–ó–ê–ü–†–û–°–´:")[1]
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É
                    for line in queries_part.split('\n'):
                        if line.strip() and line.strip()[0].isdigit():
                            # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –∏ —Ç–æ—á–∫—É
                            query_text = line.split('.', 1)[1].strip() if '. ' in line else line.strip()
                            queries.append(query_text)
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º—É –∏ –∑–∞–ø—Ä–æ—Å—ã
                if "–ó–ê–ü–†–û–°–´:" in problem_part:
                    problem = problem_part.split("–ó–ê–ü–†–û–°–´:")[0].strip()
                    queries_part = problem_part.split("–ó–ê–ü–†–û–°–´:")[1]
                    for line in queries_part.split('\n'):
                        if line.strip() and line.strip()[0].isdigit():
                            query_text = line.split('.', 1)[1].strip() if '. ' in line else line.strip()
                            queries.append(query_text)
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if not problem:
            problem = result
        if not queries:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
            last_lines = result.split('\n')[-10:]
            for line in last_lines:
                if line.strip() and line.strip()[0].isdigit() and '.' in line:
                    query_text = line.split('.', 1)[1].strip()
                    queries.append(query_text)
            if len(queries) > 5:
                queries = queries[:5]
        
        st.session_state.problem_formulation = problem
        st.session_state.internal_dialog = internal_dialog
        st.session_state.generated_queries = queries[:5]  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return result, queries
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã: {str(e)}")
        return f"–û—à–∏–±–∫–∞: {str(e)}", []

def apply_cognitive_method(method_name, context):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –º–µ—Ç–æ–¥–∏–∫—É –∫ –ø—Ä–æ–±–ª–µ–º–µ"""
    prompt = f"""
    –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥–∏–∫—É {method_name} –∫ –ø—Ä–æ–±–ª–µ–º–µ:
    
    {st.session_state.problem_formulation}
    
    –ö–æ–Ω—Ç–µ–∫—Å—Ç:
    {context}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∏–∫–∏
    - –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ—à–µ–Ω–∏—è
    - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 9000 —Å–∏–º–≤–æ–ª–æ–≤
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–≥–∏–π –∞–Ω–∞–ª–∏–∑, –∏–∑–±–µ–≥–∞–π—Ç–µ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
    """
    
    try:
        response = model.generate_content(
            prompt,
            generation_config={
                "temperature": st.session_state.temperature,
                "max_output_tokens": 12000
            },
            request_options={'timeout': 180}
        )
        return response.text
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ {method_name}: {str(e)}"

def generate_final_conclusions(context):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã"""
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã –ø–æ –ø—Ä–æ–±–ª–µ–º–µ:
    
    {st.session_state.problem_formulation}
    
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞:
    {context}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫
    - –í—ã–¥–µ–ª–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
    - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤
    """
    
    try:
        response = model.generate_content(
            prompt,
            generation_config={
                "temperature": st.session_state.temperature * 0.7,
                "max_output_tokens": 8000
            },
            request_options={'timeout': 120}
        )
        return response.text
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–æ–≤: {str(e)}"

def generate_response():
    st.session_state.processing = True
    st.session_state.report_content = None
    status_area = st.empty()
    progress_bar = st.progress(0)

    try:
        query = st.session_state.input_query.strip()
        if not query:
            status_area.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
            return

        # –≠—Ç–∞–ø 1: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        status_area.info("üîç –§–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
        problem_result, queries = formulate_problem_and_queries()
        
        with st.expander("‚úÖ –≠—Ç–∞–ø 1: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã", expanded=True):
            st.subheader("–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
            st.write(st.session_state.problem_formulation)
            if hasattr(st.session_state, 'internal_dialog'):
                st.subheader("–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–ª–æ–≥")
                st.write(st.session_state.internal_dialog)
            st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
            st.write(queries)
            st.subheader("–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ LLM")
            st.code(problem_result, language='text')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
        full_report = f"### –≠—Ç–∞–ø 1: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã ###\n\n{problem_result}\n\n"
        full_report += f"–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: {st.session_state.problem_formulation}\n\n"
        if hasattr(st.session_state, 'internal_dialog'):
            full_report += f"–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–ª–æ–≥:\n{st.session_state.internal_dialog}\n\n"
        full_report += f"–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n" + "\n".join([f"{i+1}. {q}" for i, q in enumerate(queries)]) + "\n\n"
        
        # –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        status_area.info("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        all_search_results = ""
        
        for i, search_query in enumerate(queries):
            search_result = perform_search(search_query)
            all_search_results += f"### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':\n\n{search_result}\n\n"
        
        st.session_state.search_results = all_search_results
        
        with st.expander("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", expanded=False):
            st.text(all_search_results[:10000] + ("..." if len(all_search_results) > 10000 else ""))
        
        full_report += f"### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ###\n\n{all_search_results}\n\n"
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤
        context = (
            f"–ü—Ä–æ–±–ª–µ–º–∞: {st.session_state.problem_formulation}\n"
            f"–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {query}\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç: {st.session_state.current_doc_text[:100000]}\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {all_search_results[:20000]}"
        )
        
        # –≠—Ç–∞–ø 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫
        status_area.info("‚öôÔ∏è –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏...")
        
        # –í—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏
        all_methods = CORE_METHODS.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏
        if st.session_state.selected_methods:
            all_methods += [m for m in st.session_state.selected_methods if m not in CORE_METHODS]
        
        method_results = {}
        
        for i, method in enumerate(all_methods):
            progress = int((i + 1) / (len(all_methods) + 1) * 100)
            progress_bar.progress(progress)
            
            status_area.info(f"‚öôÔ∏è –ü—Ä–∏–º–µ–Ω—è—é {method}...")
            result = apply_cognitive_method(method, context)
            
            method_results[method] = result
            
            with st.expander(f"‚úÖ {method}", expanded=False):
                st.code(result, language='text')
            
            full_report += f"### –ú–µ—Ç–æ–¥–∏–∫–∞: {method} ###\n\n{result}\n\n"
            
            time.sleep(1)
        
        # –≠—Ç–∞–ø 4: –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        status_area.info("üìù –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã...")
        progress_bar.progress(95)
        conclusions = generate_final_conclusions(full_report)
        
        with st.expander("üìù –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã", expanded=True):
            st.write(conclusions)
        
        full_report += f"### –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã ###\n\n{conclusions}\n\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        st.session_state.report_content = full_report
        progress_bar.progress(100)
        status_area.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        st.divider()
        st.subheader("–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
        st.text(full_report[:20000] + ("..." if len(full_report) > 20000 else ""))

    except Exception as e:
        st.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        traceback.print_exc()
    finally:
        st.session_state.processing = False

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("Troubleshooter")
    st.subheader("–†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º")
    
    st.markdown("### –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
    selected_methods = st.multiselect(
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏:",
        ADDITIONAL_METHODS,
        key="selected_methods"
    )

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å ---
st.title("Troubleshooter - –†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º")
st.subheader("–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")

col1, col2 = st.columns([3, 1])
with col1:
    st.text_input(
        "–í–∞—à –∑–∞–ø—Ä–æ—Å:",
        placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É...",
        key="input_query"
    )
with col2:
    st.slider(
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:",
        0.0, 1.0, 0.3, 0.1,
        key="temperature"
    )

uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–≤—Å–µ —á—Ç–æ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–µ –±–æ–ª–µ–µ 300 —Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤):",
    type=["docx"],
    key="uploaded_file"
)

if uploaded_file:
    parse_docx(uploaded_file)

if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", disabled=st.session_state.processing):
    generate_response()

# --- –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
if st.session_state.report_content and not st.session_state.processing:
    st.divider()
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç
    b64_txt = base64.b64encode(st.session_state.report_content.encode()).decode()
    txt_href = f'<a href="data:file/txt;base64,{b64_txt}" download="report.txt">üì• –°–∫–∞—á–∞—Ç—å TXT –æ—Ç—á–µ—Ç</a>'
    st.markdown(txt_href, unsafe_allow_html=True)
    
    # PDF —ç–∫—Å–ø–æ—Ä—Ç
    try:
        pdf_bytes = create_pdf(st.session_state.report_content)
        if pdf_bytes:
            b64_pdf = base64.b64encode(pdf_bytes).decode()
            pdf_href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="report.pdf">üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç</a>'
            st.markdown(pdf_href, unsafe_allow_html=True)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF: {str(e)}")

if st.session_state.processing:
    st.info("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
