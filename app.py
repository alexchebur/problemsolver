import streamlit as st
import google.generativeai as genai
import time
import requests
import traceback
import random
from docx import Document
from io import BytesIO
from fpdf import FPDF
import base64
import os
from datetime import datetime
from bs4 import BeautifulSoup
from websearch import GoogleCSESearcher
from typing import List, Tuple
import re
from report import create_html_report
#from mermaid import add_mermaid_diagrams_to_pdf 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API
api_key = st.secrets['GEMINI_API_KEY']
if not api_key:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á")
    st.stop()

genai.configure(
    api_key=api_key,
    transport='rest',
    client_options={
        'api_endpoint': 'generativelanguage.googleapis.com/'
    }
)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞
searcher = GoogleCSESearcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'current_doc_text' not in st.session_state:
    st.session_state.current_doc_text = ""
if 'processing' not in st.session_state:
    st.session_state.processing = False
if 'report_content' not in st.session_state:
    st.session_state.report_content = None
if 'problem_formulation' not in st.session_state:
    st.session_state.problem_formulation = ""
if 'generated_queries' not in st.session_state:
    st.session_state.generated_queries = []
if 'search_results' not in st.session_state:
    st.session_state.search_results = ""

# –ú–æ–¥–µ–ª—å
model = genai.GenerativeModel('gemini-2.0-flash')

# –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏
CORE_METHODS = [
    "First Principles Thinking",
    "Pareto Principle (80/20 Rule)",
    "Occam's Razor",
    "System 1 vs System 2 Thinking",
    "Second-Order Thinking"
]

ADDITIONAL_METHODS = [
    "Inversion (thinking backwards)",
    "Opportunity Cost",
    "Margin of Diminishing Returns",
    "Hanlon's Razor",
    "Confirmation Bias",
    "Availability Heuristic",
    "Parkinson's Law",
    "Loss Aversion",
    "Switching Costs",
    "Circle of Competence",
    "Regret Minimization",
    "Leverage Points",
    "Lindy Effect",
    "Game Theory",
    "Antifragility",
    "–¢–µ–æ—Ä–∏–∏ –†–µ—à–µ–Ω–∏—è –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á"
]

def get_current_date():
    return datetime.now().strftime("%Y-%m-%d")

def parse_docx(uploaded_file):
    try:
        if uploaded_file is None:
            return False

        doc = Document(BytesIO(uploaded_file.getvalue()))
        full_text = "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
        st.session_state.current_doc_text = full_text[:300000]
        st.success(f"üìÇ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(st.session_state.current_doc_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return True
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        st.session_state.current_doc_text = ""
        return False

def formulate_problem_and_queries():
    """–≠—Ç–∞–ø 1: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = st.session_state.input_query.strip()
    doc_text = st.session_state.current_doc_text[:300000]
    
    prompt = f"""
    –í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å):

    –ó–∞–ø—Ä–æ—Å: {query}
    –î–æ–∫—É–º–µ–Ω—Ç: {doc_text if doc_text else "–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞"}

    –í–∞—à–∏ –∑–∞–¥–∞—á–∏:
    1. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∫–ª—é—á–µ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É
    2. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–ª–æ–≥ –∏–∑ 10 —à–∞–≥–æ–≤ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç—ã –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞:
       [–≤–æ–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã]
       [–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å]
       [—Å–æ–º–Ω–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞]
       [–≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–æ–º–Ω–µ–Ω–∏—è]
       ...
    3. –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ 5 –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    4. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ First Principles Thinking –∏ System 2 Thinking

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É:
    - –ù–∞—á–Ω–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ —Å "–ü–†–û–ë–õ–ï–ú–ê:"
    - –ó–∞—Ç–µ–º —Å—Ç—Ä–æ–≥–æ "–†–ê–°–°–£–ñ–î–ï–ù–ò–Ø:" —Å –¥–∏–∞–ª–æ–≥–æ–º
    - –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ "–ó–ê–ü–†–û–°–´:"
    - –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏ (1. ...)
    - –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    - –ü—Ä–∏–º–µ—Ä:
    –ü–†–û–ë–õ–ï–ú–ê: [—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã]
    –†–ê–°–°–£–ñ–î–ï–ù–ò–Ø:
    [–í–æ–ø—Ä–æ—Å 1]
    [–û—Ç–≤–µ—Ç 1]
    [–°–æ–º–Ω–µ–Ω–∏–µ 1]
    [–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–æ–º–Ω–µ–Ω–∏–µ 1]

    [–í–æ–ø—Ä–æ—Å 2]
    [–û—Ç–≤–µ—Ç 2]
    ...
    –ó–ê–ü–†–û–°–´:
    1. [–ó–∞–ø—Ä–æ—Å 1]
    2. [–ó–∞–ø—Ä–æ—Å 2]
    ...
    """
    
    try:
        response = model.generate_content(
            prompt,
            generation_config={
                "temperature": st.session_state.temperature,
                "max_output_tokens": 4000
            },
            request_options={'timeout': 120}
        )
        
        result = response.text
        
        problem = ""
        internal_dialog = ""
        queries = []
        
        if "–ü–†–û–ë–õ–ï–ú–ê:" in result:
            problem_part = result.split("–ü–†–û–ë–õ–ï–ú–ê:")[1]
            if "–†–ê–°–°–£–ñ–î–ï–ù–ò–Ø:" in problem_part:
                problem = problem_part.split("–†–ê–°–°–£–ñ–î–ï–ù–ò–Ø:")[0].strip()
                internal_dialog_part = problem_part.split("–†–ê–°–°–£–ñ–î–ï–ù–ò–Ø:")[1]
                if "–ó–ê–ü–†–û–°–´:" in internal_dialog_part:
                    internal_dialog = internal_dialog_part.split("–ó–ê–ü–†–û–°–´:")[0].strip()
                    queries_part = internal_dialog_part.split("–ó–ê–ü–†–û–°–´:")[1]
                    for line in queries_part.split('\n'):
                        if line.strip() and line.strip()[0].isdigit():
                            query_text = line.split('.', 1)[1].strip() if '. ' in line else line.strip()
                            queries.append(query_text)
        
        if not problem:
            problem = result
        if not queries:
            last_lines = result.split('\n')[-10:]
            for line in last_lines:
                if line.strip() and line.strip()[0].isdigit() and '.' in line:
                    query_text = line.split('.', 1)[1].strip()
                    queries.append(query_text)
            if len(queries) > 5:
                queries = queries[:5]
        
        st.session_state.problem_formulation = problem
        st.session_state.internal_dialog = internal_dialog
        st.session_state.generated_queries = queries[:5]
        
        return result, queries
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã: {str(e)}")
        return f"–û—à–∏–±–∫–∞: {str(e)}", []

def apply_cognitive_method(method_name, context):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –º–µ—Ç–æ–¥–∏–∫—É –∫ –ø—Ä–æ–±–ª–µ–º–µ"""
    prompt = f"""
    –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥–∏–∫—É {method_name} –∫ –ø—Ä–æ–±–ª–µ–º–µ:
    
    {st.session_state.problem_formulation}
    
    –ö–æ–Ω—Ç–µ–∫—Å—Ç:
    {context}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∏–∫–∏
    - –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ—à–µ–Ω–∏—è
    - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 9000 —Å–∏–º–≤–æ–ª–æ–≤
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–≥–∏–π –∞–Ω–∞–ª–∏–∑, –∏–∑–±–µ–≥–∞–π—Ç–µ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
    - –î–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–æ—Ç–æ–∫–æ–≤ –ø–∏—à–∏—Ç–µ –∫–æ–¥ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Mermaid, –°–¢–†–û–ì–û –∫–æ–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å –ø–æ–º–µ—Ç–∫–∏ –≤–∏–¥–∞ [```mermaid], –°–¢–†–û–ì–û –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ direction TD - top-down, –±–µ–∑ LR –∏–ª–∏ RL
    """
    
    try:
        response = model.generate_content(
            prompt,
            generation_config={
                "temperature": st.session_state.temperature,
                "max_output_tokens": 12000
            },
            request_options={'timeout': 180}
        )
        return response.text
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ {method_name}: {str(e)}"

def generate_refinement_queries(context: str) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ 5 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, 
    –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã –∏ —É–≥–ª—É–±–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è:
    
    {context[:100000]}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –ó–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≥–∏–ø–æ—Ç–µ–∑ –∏ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    - –í—ã–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    - –§–æ—Ä–º–∞—Ç:
        1. [–ó–∞–ø—Ä–æ—Å 1]
        2. [–ó–∞–ø—Ä–æ—Å 2]
        3. [–ó–∞–ø—Ä–æ—Å 3]
        4. [–ó–∞–ø—Ä–æ—Å 4]
        5. [–ó–∞–ø—Ä–æ—Å 5]
    """
    
    try:
        response = model.generate_content(
            prompt,
            generation_config={
                "temperature": st.session_state.temperature * 0.5,
                "max_output_tokens": 2000
            },
            request_options={'timeout': 90}
        )
        result = response.text
        
        queries = []
        for line in result.split('\n'):
            if line.strip() and line.strip()[0].isdigit():
                query_text = line.split('.', 1)[1].strip() if '. ' in line else line.strip()
                queries.append(query_text)
        
        return queries[:5]
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {str(e)}")
        return []

def generate_final_conclusions(problem_formulation: str, analysis_context: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã –ø–æ –ø—Ä–æ–±–ª–µ–º–µ:
    
    {problem_formulation}
    
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞:
    {analysis_context[:100000]}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –í—ã–¥–µ–ª–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏—Ö –æ–ø–∏—à–∏—Ç–µ (–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã, –ø–ª–∞–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
    - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º
    - –ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    - –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø—É—Ç–∏
    - –í—ã–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    try:
        response = model.generate_content(
            prompt,
            generation_config={
                "temperature": st.session_state.temperature * 0.7,
                "max_output_tokens": 9000
            },
            request_options={'timeout': 120}
        )
        return response.text
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–æ–≤: {str(e)}"

def generate_response():
    st.session_state.processing = True
    st.session_state.report_content = None
    status_area = st.empty()
    progress_bar = st.progress(0)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        try:
            test_response = requests.get("https://www.google.com", timeout=10)
            st.info(f"–°–µ—Ç–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'OK' if test_response.status_code == 200 else '–ü—Ä–æ–±–ª–µ–º—ã'}")
        except Exception as e:
            st.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

        query = st.session_state.input_query.strip()
        if not query:
            status_area.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
            return

        # –≠—Ç–∞–ø 1: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        status_area.info("üîç –§–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
        problem_result, queries = formulate_problem_and_queries()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if not queries:
            queries = [query]  # query - –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (LLM –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã)")
        
        # –í—ã–≤–æ–¥ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        if hasattr(st.session_state, 'internal_dialog') and st.session_state.internal_dialog:
            st.sidebar.subheader("üß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –ò–ò")
            st.sidebar.text_area(
                "",
                value=st.session_state.internal_dialog,
                height=300,
                label_visibility="collapsed"
            )
        else:
            st.sidebar.warning("–†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ 1
        with st.expander("‚úÖ –≠—Ç–∞–ø 1: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã", expanded=False):
            st.subheader("–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
            st.write(st.session_state.problem_formulation)
            
            st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
            st.write(queries)
            
            # –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ LLM (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ expander)
            st.subheader("–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ LLM")
            st.code(problem_result, language='text')
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        full_report = f"### –≠—Ç–∞–ø 1: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã ###\n\n{problem_result}\n\n"
        full_report += f"–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: {st.session_state.problem_formulation}\n\n"
        if hasattr(st.session_state, 'internal_dialog') and st.session_state.internal_dialog:
            full_report += f"–†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:\n{st.session_state.internal_dialog}\n\n"
        full_report += f"–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n" + "\n".join([f"{i+1}. {q}" for i, q in enumerate(queries)]) + "\n\n"

        # –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        status_area.info("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        all_search_results = ""
        
        for i, search_query in enumerate(queries):
            try:
                clean_query = search_query.replace('"', '').strip()
                search_result_list = searcher.perform_search(clean_query, max_results=3, full_text=True)
                
                formatted_results = []
                for j, r in enumerate(search_result_list, 1):
                    content = r.get('full_content', r.get('snippet', ''))
                    formatted_results.append(
                        f"–†–µ–∑—É–ª—å—Ç–∞—Ç {j}: {r.get('title', '')}\n"
                        f"–ö–æ–Ω—Ç–µ–Ω—Ç: {content[:5000]}{'...' if len(content) > 5000 else ''}\n"
                        f"URL: {r.get('url', '')}\n"
                    )

                search_result_str = "\n\n".join(formatted_results)
                all_search_results += f"### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':\n\n{search_result_str}\n\n"
                
                # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö expanders)
                st.sidebar.subheader(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'")
                for j, r in enumerate(search_result_list, 1):
                    title = r.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    url = r.get('url', '')
                    snippet = r.get('snippet', '')

                    if url and not url.startswith('http'):
                        url = 'https://' + url

                    st.sidebar.markdown(f"**{j}. {title}**")
                    if url:
                        st.sidebar.markdown(f"[{url}]({url})")
                    if snippet:
                        st.sidebar.caption(snippet[:300] + ('...' if len(snippet) > 300 else ''))
                    st.sidebar.write("---")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{search_query}': {str(e)}")
                all_search_results += f"### –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{search_query}': {str(e)}\n\n"
        
        st.session_state.search_results = all_search_results
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤
        context = (
            f"–ü—Ä–æ–±–ª–µ–º–∞: {st.session_state.problem_formulation}\n"
            f"–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {query}\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç: {st.session_state.current_doc_text[:100000]}\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {all_search_results[:20000]}"
        )
        
        # –≠—Ç–∞–ø 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫
        status_area.info("‚öôÔ∏è –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏...")
        
        all_methods = CORE_METHODS.copy()
        if st.session_state.selected_methods:
            all_methods += [m for m in st.session_state.selected_methods if m not in CORE_METHODS]
        
        method_results = {}
        
        for i, method in enumerate(all_methods):
            progress = int((i + 1) / (len(all_methods) + 1) * 100)
            progress_bar.progress(progress)
            
            status_area.info(f"‚öôÔ∏è –ü—Ä–∏–º–µ–Ω—è—é {method}...")
            try:
                result = apply_cognitive_method(method, context)
                method_results[method] = result
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç–æ–¥–∞ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ expander
                st.subheader(f"‚úÖ {method}")
                st.text_area("", value=result, height=300, label_visibility="collapsed")
                
                full_report += f"### –ú–µ—Ç–æ–¥–∏–∫–∞: {method} ###\n\n{result}\n\n"
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ {method}: {str(e)}")
                full_report += f"### –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ {method}: {str(e)}\n\n"
            
            time.sleep(1)
        
        # –≠—Ç–∞–ø 4: –£—Ç–æ—á–Ω—è—é—â–∏–π –ø–æ–∏—Å–∫
        status_area.info("üîç –í—ã–ø–æ–ª–Ω—è—é —É—Ç–æ—á–Ω—è—é—â–∏–π –ø–æ–∏—Å–∫...")
        refinement_search_results = ""
    
        refinement_context = (
            f"–ü—Ä–æ–±–ª–µ–º–∞: {st.session_state.problem_formulation}\n"
            f"–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–∏–∫: {' '.join(method_results.values())[:10000]}\n"
        )
    
        refinement_queries = generate_refinement_queries(refinement_context)
    
        if refinement_queries:
            st.sidebar.subheader("üîé –£—Ç–æ—á–Ω—è—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã")
            for i, query in enumerate(refinement_queries):
                st.sidebar.write(f"{i+1}. {query}")
            
            for i, query in enumerate(refinement_queries):
                try:
                    clean_query = query.replace('"', '').strip()
                    search_results = searcher.perform_search(clean_query, max_results=2, full_text=True)
                
                    formatted = []
                    for j, r in enumerate(search_results, 1):
                        content = r.get('full_content', r.get('snippet', ''))
                        formatted.append(
                            f"–†–µ–∑—É–ª—å—Ç–∞—Ç {j}: {r.get('title', '')}\n"
                            f"–ö–æ–Ω—Ç–µ–Ω—Ç: {content[:3000]}{'...' if len(content) > 3000 else ''}\n"
                            f"URL: {r.get('url', '')}\n"
                        )
                
                    refinement_search_results += f"### –£—Ç–æ—á–Ω—è—é—â–∏–π –∑–∞–ø—Ä–æ—Å '{query}':\n\n"
                    refinement_search_results += "\n\n".join(formatted) + "\n\n"
                
                except Exception as e:
                    refinement_search_results += f"### –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}': {str(e)}\n\n"
    
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
        final_context = f"{context}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞:\n{refinement_search_results}"
    
        # –≠—Ç–∞–ø 5: –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        status_area.info("üìù –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã...")
        progress_bar.progress(95)
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç–æ–¥–∏–∫
            analysis_context = (
                f"–ü—Ä–æ–±–ª–µ–º–∞: {st.session_state.problem_formulation}\n"
                f"–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–∏–∫:\n"
                + "\n\n".join([f"{method}:\n{result}" for method, result in method_results.items()])
            )
            
            conclusions = generate_final_conclusions(
                problem_formulation=st.session_state.problem_formulation,
                analysis_context=analysis_context
            )
            
            st.subheader("üìù –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã")
            st.text_area("", value=conclusions, height=400, label_visibility="collapsed")
            
            full_report += f"### –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã ###\n\n{conclusions}\n\n"
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–æ–≤: {str(e)}")
            full_report += f"### –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–æ–≤: {str(e)}\n\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (–±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞)
        st.session_state.report_content = full_report
        progress_bar.progress(100)
        status_area.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (–±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞)
        #st.divider()
        #st.subheader("–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
        #st.text(full_report[:30000] + ("..." if len(full_report) > 30000 else ""))

    except Exception as e:
        st.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        traceback.print_exc()
    finally:
        st.session_state.processing = False

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
with st.sidebar:
    st.title("Troubleshooter")
    st.subheader("–†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º")
    
    st.markdown("### –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
    selected_methods = st.multiselect(
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏:",
        ADDITIONAL_METHODS,
        key="selected_methods"
    )

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
st.title("Troubleshooter - –†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º")
st.subheader("–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")

col1, col2 = st.columns([3, 1])
with col1:
    st.text_input(
        "–í–∞—à –∑–∞–ø—Ä–æ—Å:",
        placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É...",
        key="input_query"
    )
with col2:
    st.slider(
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:",
        0.0, 1.0, 0.3, 0.1,
        key="temperature"
    )

uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª —Å –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º –≤—Ä—É—á–Ω—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–≤—Å–µ —á—Ç–æ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–µ –±–æ–ª–µ–µ 300 —Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤):",
    type=["docx"],
    key="uploaded_file"
)

if uploaded_file:
    parse_docx(uploaded_file)

if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ", disabled=st.session_state.processing):
    generate_response()

if st.session_state.report_content and not st.session_state.processing:
    st.divider()
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç
    b64_txt = base64.b64encode(st.session_state.report_content.encode()).decode()
    txt_href = f'<a href="data:file/txt;base64,{b64_txt}" download="report.txt">üì• –°–∫–∞—á–∞—Ç—å TXT –æ—Ç—á–µ—Ç</a>'
    st.markdown(txt_href, unsafe_allow_html=True)
    
    # HTML —ç–∫—Å–ø–æ—Ä—Ç
    try:
        html_bytes = create_html_report(st.session_state.report_content, "–û—Ç—á–µ—Ç Troubleshooter")
        b64_html = base64.b64encode(html_bytes).decode()
        html_href = f'<a href="data:text/html;base64,{b64_html}" download="report.html">üì• –°–∫–∞—á–∞—Ç—å HTML –æ—Ç—á–µ—Ç</a>'
        st.markdown(html_href, unsafe_allow_html=True)
        
        # –ü—Ä–µ–≤—å—é –æ—Ç—á–µ—Ç–∞
        with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞"):
            st.components.v1.html(html_bytes.decode('utf-8'), height=600, scrolling=True)
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML –æ—Ç—á–µ—Ç–∞: {str(e)}")

if st.session_state.processing:
    st.info("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
