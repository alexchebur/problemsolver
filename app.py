import streamlit as st
import google.generativeai as genai
import time
import traceback
from docx import Document
from io import BytesIO
from fpdf import FPDF
import base64
import os
from duckduckgo_search import DDGS  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API
#api_key = os.environ['GEMINI_API_KEY']
api_key = st.secrets['GEMINI_API_KEY']
if not api_key:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á")
    st.stop()

genai.configure(
    api_key=api_key,
    transport='rest',
    client_options={
        'api_endpoint': 'generativelanguage.googleapis.com/'
    }
)

model = genai.GenerativeModel('gemini-2.0-flash')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'current_doc_text' not in st.session_state:
    st.session_state.current_doc_text = ""
if 'processing' not in st.session_state:
    st.session_state.processing = False
if 'report_content' not in st.session_state:
    st.session_state.report_content = None

REASONING_STEPS = [
    "–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query} –∏ –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–æ–±–ª–µ–º—É. –ü—Ä–∏–¥—É–º–∞–π –ø—è—Ç—å —Å—Ö–æ–¥–Ω—ã—Ö –ø–æ —Å–º—ã—Å–ª—É –∫–æ–Ω—Ü–µ–ø—Ü–∏–π-—Ç–µ–∑–∏—Å–æ–≤ –∏–∑ —Å–º–µ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥ Tree of Thoughts. –°–æ—Å—Ç–∞–≤—å –ø–æ—à–∞–≥–æ–≤—É—é —Ü–µ–ø–æ—á–∫—É —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –û–ø–∏—à–∏ –≤—Å—é —Ü–µ–ø–æ—á–∫—É —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–ª–æ–≥ —Ä–∞–∑–º—ã—à–ª—è—é—à–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ c –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –Ω–∏—Ö (–ù–ï –£–ü–û–ú–ò–ù–ê–ô –ø—Ä–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–ª–æ–≥, —Ç–æ–ª—å–∫–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏ –µ–≥–æ)",
    "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: –≥–∏–ø–æ—Ç–µ–∑—ã –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∏–∑ {context} (–≤ —Ç–æ–º —á–∏—Å–ª–µ –æ—Ç–≤–µ—á–∞—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å–µ–±–µ –≤ —Ä–µ–∂–∏–º–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ù–ï —É–ø–æ–º–∏–Ω–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–ª–æ–≥), —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∑–Ω–∞–Ω–∏—è –∏–∑ {sys_prompt}",
    "–¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥—ã. –í—ã–±–µ—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ {context}, –ø–æ–¥—Ä–æ–±–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥–æ–µ –∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
]

#def duckduckgo_search(query, region='ru-ru', max_results=8, max_snippet_length=3000):
#    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ DuckDuckGo —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏"""
#    try:
#        with DDGS() as ddgs:
#            results = []
#            for r in ddgs.text(
#                query,
#                region=region,
#                max_results=max_results,
#                backend="lite"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º "lite" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
#            ):
#                # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
#                if len(r['body']) > max_snippet_length:
#                    r['body'] = r['body'][:max_snippet_length] + "..."
#                results.append(r)

#            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
#            formatted = []
#            for i, r in enumerate(results, 1):
#                formatted.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {r['title']}\n{r['body']}\nURL: {r['href']}\n")

#            return "\n\n".join(formatted)
#    except Exception as e:
#        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

def perform_search(query, region='ru-ru', max_results=8, max_snippet_length=3000):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    try:
        with DDGS() as ddgs:
            results = []
            st.sidebar.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            
            for r in ddgs.text(
                query,
                region=region,
                max_results=max_results,
                backend="lite"
            ):
                # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                snippet = r['body'][:500] + "..." if len(r['body']) > 500 else r['body']
                results.append(r)
                
                # –í—ã–≤–æ–¥–∏–º –≤ —Å–∞–π–¥–±–∞—Ä
                with st.sidebar.expander(f"üîç {r['title']}"):
                    st.write(snippet)
                    st.caption(f"URL: {r['href']}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            formatted = []
            for i, r in enumerate(results, 1):
                body = r['body'][:max_snippet_length] + "..." if len(r['body']) > max_snippet_length else r['body']
                formatted.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {r['title']}\n{body}\nURL: {r['href']}\n")
            
            return "\n\n".join(formatted)
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"






def parse_docx(uploaded_file):
    try:
        if uploaded_file is None:
            return False

        doc = Document(BytesIO(uploaded_file.getvalue()))
        full_text = "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
        st.session_state.current_doc_text = full_text[:300000]
        st.success(f"üìÇ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(st.session_state.current_doc_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return True
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        st.session_state.current_doc_text = ""
        return False

def create_pdf(content, title="–û—Ç—á–µ—Ç"):
    try:
        pdf = FPDF()
        pdf.add_page()
        
        # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
        font_path = "fonts/DejaVuSansCondensed.ttf"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —à—Ä–∏—Ñ—Ç–∞
        if not os.path.exists(font_path):
            st.error(f"üö´ –§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {font_path}")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç
        pdf.add_font('DejaVu', '', font_path, uni=True)
        pdf.set_font('DejaVu', '', 12)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ (190 –º–º - —à–∏—Ä–∏–Ω–∞ A4 –º–∏–Ω—É—Å –ø–æ–ª—è)
        effective_width = 190
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã
        paragraphs = content.split('\n')
        
        for para in paragraphs:
            if not para.strip():
                pdf.ln(6)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
                continue
                
            # –†–∞–∑–±–∏–≤–∞–µ–º –∞–±–∑–∞—Ü –Ω–∞ —Å–ª–æ–≤–∞
            words = para.split()
            current_line = ""
            
            for word in words:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
                test_line = current_line + " " + word if current_line else word
                if pdf.get_string_width(test_line) <= effective_width:
                    current_line = test_line
                else:
                    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
                    pdf.cell(0, 10, txt=current_line, ln=1)
                    current_line = word
            
            # –í—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –≤ –∞–±–∑–∞—Ü–µ
            if current_line:
                pdf.cell(0, 10, txt=current_line, ln=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
            pdf.ln(4)
        
        buffer = BytesIO()
        pdf.output(buffer)
        return buffer.getvalue()
    
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")
        return None

def generate_response():
    st.session_state.processing = True
    st.session_state.report_content = None
    status_area = st.empty()
    progress_bar = st.progress(0)
    results_container = st.empty()

    try:
        query = st.session_state.input_query.strip()
        if not query:
            status_area.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
            return

        if not st.session_state.current_doc_text:
            status_area.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ DuckDuckGo
        status_area.info("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
        #search_results = duckduckgo_search(query)
        search_results = perform_search(query)
        status_area.success("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        context = (
            f"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {st.session_state.sys_prompt}\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç: {st.session_state.current_doc_text[:300000]}...\n"
            f"–ó–∞–ø—Ä–æ—Å: {query}\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞:\n{search_results}"
        )

        responses = []
        full_report = ""
        
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
            for step_num, step_template in enumerate(REASONING_STEPS):
                progress = int((step_num + 1) / len(REASONING_STEPS) * 100)
                progress_bar.progress(progress)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —à–∞–≥–∞
                step_name = step_template.format(
                    query=query,
                    context=context,
                    sys_prompt=st.session_state.sys_prompt
                )
                
                st.markdown(f"**üîπ –®–∞–≥ {step_num+1}/{len(REASONING_STEPS)}**")
                
                try:
                    response = model.generate_content(
                        step_name,
                        generation_config={
                            "temperature": st.session_state.temperature,
                            "max_output_tokens": 10000
                        },
                        request_options={'timeout': 120}
                    )
                    
                    result = response.text
                    responses.append(result)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    context += f"\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–≥–∞ {step_num+1}: {result[:9000]}..."
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    with st.expander(f"‚úÖ –®–∞–≥ {step_num+1} –∑–∞–≤–µ—Ä—à–µ–Ω", expanded=True):
                        st.code(result, language='text')
                    
                    full_report += f"### –®–∞–≥ {step_num+1} ###\n\n{result}\n\n{'='*50}\n\n"
                    
                except Exception as e:
                    error_msg = f"üö® –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step_num+1}: {str(e)}"
                    st.error(error_msg)
                    responses.append(error_msg)
                    full_report += f"### –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step_num+1} ###\n\n{error_msg}\n\n"

                time.sleep(1)

        st.session_state.report_content = full_report
        progress_bar.empty()
        st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        st.divider()
        st.subheader("–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
        st.code(full_report, language='text')

    except Exception as e:
        st.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        traceback.print_exc()
    finally:
        st.session_state.processing = False

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("Troubleshooter")
    st.subheader("–†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º")

    st.markdown("### –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
    st.session_state.sys_prompt = st.text_area(
        "",
        value="–í—ã - troubleshooter, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º. "
              "–ü–æ–º–æ–≥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø—É—Ç–∏ –µ–µ —Ä–µ—à–µ–Ω–∏—è. "
              "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤—É–π—Ç–µ—Å—å –º–µ—Ç–æ–¥–∞–º–∏ First Principles Thinking, Inversion (thinking backwards), Opportunity Cost, Second-Order Thinking, Margin of Diminishing Returns, Occam‚Äôs Razor, Hanlon‚Äôs Razor, Confirmation Bias, Availability Heuristic, Parkinson‚Äôs Law, Loss Aversion, Switching Costs, Circle of Competence, Regret Minimization, Leverage Points, Pareto Principle (80/20 Rule), Lindy Effect, Game Theory, System 1 vs System 2 Thinking, Antifragility, –¢–µ–æ—Ä–∏–∏ –†–µ—à–µ–Ω–∏—è –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á. "
              "–û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π, —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –º–µ–Ω–µ–µ 9000 —Å–∏–º–≤–æ–ª–æ–≤ (–ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ). "
              "–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, —Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ ASCII-–¥–∏–∞–≥—Ä–∞–º–º (–µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —á–∏—Å–µ–ª –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –¥–∏–∞–≥—Ä–∞–º–º—ã –ù–ï –ù–£–ñ–ù–´). –û—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ-—Ä—É—Å—Å–∫–∏.",
        height=250,
        label_visibility="collapsed"
    )

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å ---
st.title("Troubleshooter - –†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º")
st.subheader("–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ Word")

col1, col2 = st.columns([3, 1])
with col1:
    st.text_input(
        "–í–∞—à –∑–∞–ø—Ä–æ—Å:",
        placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É...",
        key="input_query"
    )
with col2:
    st.slider(
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:",
        0.0, 1.0, 0.3, 0.1,
        key="temperature"
    )

uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–≤—Å–µ —á—Ç–æ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–µ –±–æ–ª–µ–µ 300 —Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤):",
    type=["docx"],
    key="uploaded_file"
)

if uploaded_file:
    parse_docx(uploaded_file)

if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", disabled=st.session_state.processing):
    generate_response()

# --- –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
if st.session_state.report_content and not st.session_state.processing:
    st.divider()
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç
    b64_txt = base64.b64encode(st.session_state.report_content.encode()).decode()
    txt_href = f'<a href="data:file/txt;base64,{b64_txt}" download="report.txt">üì• –°–∫–∞—á–∞—Ç—å TXT –æ—Ç—á–µ—Ç (MarkDown)</a>'
    st.markdown(txt_href, unsafe_allow_html=True)
    
    # PDF —ç–∫—Å–ø–æ—Ä—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    try:
        pdf_bytes = create_pdf(st.session_state.report_content)
        b64_pdf = base64.b64encode(pdf_bytes).decode()
        pdf_href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="report.pdf">üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç</a>'
        st.markdown(pdf_href, unsafe_allow_html=True)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF: {str(e)}")

if st.session_state.processing:
    st.info("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
