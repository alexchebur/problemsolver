import streamlit as st
import google.generativeai as genai
import time
import traceback
from docx import Document
from io import BytesIO
from fpdf import FPDF
import base64
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API
api_key = "AIzaSyCGC2JB3BgfBMycbt4us1eq6D5exNOvKT8"
if not api_key:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á")
    st.stop()

genai.configure(
    api_key=api_key,
    transport='rest',
    client_options={
        'api_endpoint': 'generativelanguage.googleapis.com/'
    }
)

model = genai.GenerativeModel('gemini-2.0-flash')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'current_doc_text' not in st.session_state:
    st.session_state.current_doc_text = ""
if 'processing' not in st.session_state:
    st.session_state.processing = False
if 'report_content' not in st.session_state:
    st.session_state.report_content = None

REASONING_STEPS = [
    "–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query} –∏ –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–π –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–æ–±–ª–µ–º—É. –ü—Ä–∏–¥—É–º–∞–π –ø—è—Ç—å —Å—Ö–æ–¥–Ω—ã—Ö –ø–æ —Å–º—ã—Å–ª—É –∫–æ–Ω—Ü–µ–ø—Ü–∏–π-—Ç–µ–∑–∏—Å–æ–≤ –∏–∑ —Å–º–µ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤",
    "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: –≥–∏–ø–æ—Ç–µ–∑—ã –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∑–Ω–∞–Ω–∏—è –∏–∑ {st.session_state.sys_prompt}",
    "–¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥—ã. –í—ã–±–µ—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ {context}, –ø–æ–¥—Ä–æ–±–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥–æ–µ –∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
]

def parse_docx(uploaded_file):
    try:
        if uploaded_file is None:
            return False

        doc = Document(BytesIO(uploaded_file.getvalue()))
        full_text = "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
        st.session_state.current_doc_text = full_text[:400000]
        st.success(f"üìÇ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(st.session_state.current_doc_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return True
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        st.session_state.current_doc_text = ""
        return False

def process_step(step_num, step_name, context, temperature):
    try:
        step_text = st.empty()
        step_text.markdown(f"**üîπ –®–∞–≥ {step_num+1}/{len(REASONING_STEPS)}: {step_name}**")

        prompt = (
            f"{step_name}\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n"
            "–í–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–º, –Ω–µ –º–µ–Ω–µ–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ —à–∞–≥–∞—Ö "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –ø–∏—à–∏—Ç–µ '–ù–∞ —à–∞–≥–µ 1...', '–í —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞...')"
        )

        response = model.generate_content(
            prompt,
            generation_config={
                "temperature": temperature,
                "max_output_tokens": 9000
            },
            request_options={'timeout': 60}
        )

        result = response.text
        step_text.markdown(f"**‚úÖ –®–∞–≥ {step_num+1} –∑–∞–≤–µ—Ä—à–µ–Ω**")
        st.markdown(f"---\n{result}\n---")
        return result

    except Exception as e:
        error_msg = f"üö® –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step_num+1}: {str(e)}"
        st.error(error_msg)
        return error_msg

def create_pdf(content, title="–û—Ç—á–µ—Ç –æ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã"):
    """–°–æ–∑–¥–∞–µ—Ç PDF —Ñ–∞–π–ª –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    pdf = FPDF()
    pdf.add_page()

    # –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É –≤ –ø–∞–ø–∫–µ fonts —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    font_path = "fonts/DejaVuSansCondensed.ttf"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —à—Ä–∏—Ñ—Ç–∞
    if not os.path.exists(font_path):
        st.error(f"üö® –§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {font_path}")
        st.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ fonts –≤–∞—à–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        return None

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç
        pdf.add_font('DejaVu', '', font_path, uni=True)
        pdf.set_font('DejaVu', '', 12)
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞: {str(e)}")
        return None

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.set_font_size(16)
    pdf.cell(0, 10, title, 0, 1, 'C')
    pdf.ln(10)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    pdf.set_font_size(12)
    for line in content.split('\n'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Markdown
        if line.startswith('## '):
            pdf.set_font_size(14)
            pdf.cell(0, 10, line[3:], 0, 1)
            pdf.ln(5)
            pdf.set_font_size(12)
        elif line.startswith('# '):
            pdf.set_font_size(16)
            pdf.cell(0, 10, line[2:], 0, 1, 'C')
            pdf.ln(10)
            pdf.set_font_size(12)
        else:
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
            cleaned_line = line.lstrip()
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if cleaned_line:
                pdf.multi_cell(0, 8, cleaned_line)
            pdf.ln(5)

    # --- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å fpdf2 >= 2.0 ---
    return pdf.output(dest='S')  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç bytes

def generate_response():
    st.session_state.processing = True
    st.session_state.report_content = None
    status_area = st.empty()
    progress_bar = st.progress(0)
    results_container = st.container()

    try:
        query = st.session_state.input_query.strip()
        if not query:
            status_area.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
            return

        if not st.session_state.current_doc_text:
            status_area.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç")
            return

        # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –¥–æ–∫—É–º–µ–Ω—Ç + –∑–∞–ø—Ä–æ—Å
        context = (
            f"{st.session_state.sys_prompt}\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç:\n{st.session_state.current_doc_text}\n"
            f"–ó–∞–ø—Ä–æ—Å: {query}"
        )

        responses = []
        with results_container:
            for step_num, step_name in enumerate(REASONING_STEPS):
                progress = int((step_num + 1) / len(REASONING_STEPS) * 100)
                progress_bar.progress(progress)

                # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
                prompt = (
                    f"{step_name}\n"
                    f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n"
                    "–í–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–º, –Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —à–∞–≥–∞—Ö "
                    "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –ø–∏—à–∏—Ç–µ '–ù–∞ —à–∞–≥–µ 1...', '–í —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞...')"
                )

                step_text = st.empty()
                step_text.markdown(f"**üîπ –®–∞–≥ {step_num+1}/{len(REASONING_STEPS)}: {step_name}**")

                try:
                    response = model.generate_content(
                        prompt,
                        generation_config={
                            "temperature": st.session_state.temperature,
                            "max_output_tokens": 9000
                        },
                        request_options={'timeout': 60}
                    )
                    result = response.text
                    step_text.markdown(f"**‚úÖ –®–∞–≥ {step_num+1} –∑–∞–≤–µ—Ä—à–µ–Ω**")
                    st.markdown(f"---\n{result}\n---")
                    responses.append(result)

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
                    context += f"\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–≥–∞ {step_num+1} ({step_name}): {result}"

                except Exception as e:
                    error_msg = f"üö® –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step_num+1}: {str(e)}"
                    st.error(error_msg)
                    responses.append(error_msg)

                time.sleep(1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        raw_report = ""
        for i, response in enumerate(responses):
            raw_report += f"### –®–∞–≥ {i + 1}: {REASONING_STEPS[i]}\n\n{response}\n\n"

        st.session_state.report_content = raw_report

        # –í—ã–≤–æ–¥–∏–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.divider()
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —à–∞–≥—É")
        st.markdown(raw_report)

    except Exception as e:
        st.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        traceback.print_exception(e)
    finally:
        st.session_state.processing = False
        progress_bar.empty()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("üß† Troubleshooter")
    st.subheader("–†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º")

    st.markdown("### –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
    st.text_area(
        "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:",
        value="–í—ã - troubleshooter, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö –∑–Ω–∞–Ω–∏–π –∏ –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. "
              "–ü–æ–º–æ–≥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø—É—Ç–∏ –µ–µ —Ä–µ—à–µ–Ω–∏—è. –†—É–∫–æ–≤–æ–¥—Å—Ç–≤—É–π—Ç–µ—Å—å –º–µ—Ç–æ–¥–∞–º–∏ First Principles Thinking, "
              "Inversion (thinking backwards), Opportunity Cost, Second-Order Thinking, Margin of Diminishing Returns, Occam‚Äôs Razor, "
              "Hanlon‚Äôs Razor, Confirmation Bias, Availability Heuristic, Parkinson‚Äôs Law, Loss Aversion, Switching Costs, "
              "Circle of Competence, Regret Minimization, Leverage Points, Pareto Principle (80/20 Rule), Lindy Effect, Game Theory, "
              "System 1 vs System 2 Thinking, Antifragility, –¢–µ–æ—Ä–∏–∏ —Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á. –í—ã –±—É–¥–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞. –û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π. –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –±—É–¥—É—Ç –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –≤—ã–≤–æ–¥—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö. –ß–∏—Å–ª–æ–≤—ã–µ —Ä—è–¥—ã –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ASCII-–¥–∏–∞–≥—Ä–∞–º–º. –û—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ-—Ä—É—Å—Å–∫–∏",
        height=300,
        key="sys_prompt"
    )

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å ---
st.title("üß† Troubleshooter - –†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º")
st.subheader("–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ Word")
col1, col2 = st.columns([3, 1])
with col1:
    st.text_input(
        "–í–∞—à –∑–∞–ø—Ä–æ—Å:",
        placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É...",
        key="input_query"
    )
with col2:
    st.slider(
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:",
        0.0, 1.0, 0.3, 0.1,
        key="temperature"
    )

st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –±–æ–ª–µ–µ 200 —Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤):",
    type=["docx"],
    key="uploaded_file",
    on_change=lambda: parse_docx(st.session_state.uploaded_file)
)

if st.session_state.uploaded_file and not st.session_state.current_doc_text:
    parse_docx(st.session_state.uploaded_file)

if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", disabled=st.session_state.processing):
    generate_response()

if st.session_state.processing:
    st.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

# --- –≠–∫—Å–ø–æ—Ä—Ç PDF ---
if st.session_state.report_content:
    st.divider()
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # –°–æ–∑–¥–∞–µ–º PDF
    pdf_bytes = create_pdf(st.session_state.report_content)

    if pdf_bytes:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        b64 = base64.b64encode(pdf_bytes).decode()
        filename = f"gemini_report_{time.strftime('%Y%m%d_%H%M%S')}.pdf"
        href = f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}">üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç</a>'
        st.markdown(href, unsafe_allow_html=True)
