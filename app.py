import streamlit as st
import google.generativeai as genai
import base64
import time

# Настройка API
api_key = st.secrets.get('GEMINI_API_KEY')
if not api_key:
    st.error("❌ API ключ не найден. Пожалуйста, настройте GEMINI_API_KEY в секретах Streamlit")
    st.stop()

genai.configure(api_key=api_key)

# Фрагменты произведений авторов для стилизации
AUTHOR_STYLES = {
    "tolstoy": {
        "name": "Л.Н. Толстой",
        "fragment": """
Фрагмент из "Войны и мира":
«И, отделавшись от молодого человека, не умеющего жить, она возвратилась к своим занятиям хозяйки дома и продолжала прислушиваться и приглядываться, готовая подать помощь на тот пункт, где ослабевал разговор. Как хозяин прядильной мастерской, посадив работников по местам, прохаживается по заведению, замечая неподвижность или непривычный, скрипящий, слишком громкий звук веретена, торопливо идет, сдерживает или пускает его в надлежащий ход, — так и Анна Павловна, прохаживаясь по своей гостиной, подходила к замолкнувшему или слишком много говорившему кружку и одним словом или перемещением опять заводила равномерную, приличную разговорную машину. Но среди этих забот все виден был в ней особенный страх за Пьера. Она заботливо поглядывала на него в то время, как он подошел послушать то, что говорилось около Мортемара, и отошел к другому кружку, где говорил аббат. Для Пьера, воспитанного за границей, этот вечер Анны Павловны был первый, который он видел в России. Он знал, что тут собрана вся интеллигенция Петербурга, и у него, как у ребенка в игрушечной лавке, разбегались глаза. Он все боялся пропустить умные разговоры, которые он может услыхать. Глядя на уверенные и изящные выражения лиц, собранных здесь, он все ждал чего-нибудь особенно умного. Наконец он подошел к Морио. Разговор показался ему интересен, и он остановился, ожидая случая высказать свои мысли, как это любят молодые люди.»
        """,
        "description": "Психологическая глубина, детальные описания внутреннего мира персонажей, эпический размах"
    },
    "pelevin": {
        "name": "В.О. Пелевин", 
        "fragment": """
Фрагмент из "Generation П":
«о коридору бежит маленькая фигурка.  Нарисована  она  с  большой  любовью,
даже несколько  сентиментально.  Если  нажать  клавишу  "Up",  она  подпрыгнет
вверх, прогнется, повиснет на секунду в воздухе и  попытается  что-то  поймать
над своей головой. Если нажать  "Down",  она  присядет  и  постарается  что-то
поднять с земли под ногами. Если нажать  "Right",  она  побежит  вправо.  Если
нажать "Left" - влево. Вообще, ею можно управлять с помощью разных клавиш,  но
эти четыре - основные.
   Проход, по которому бежит фигурка,  меняется.  Большей  частью  это  что-то
вроде каменной штольни, но иногда он становится удивительной красоты  галереей
с полосой восточного орнамента на стене и высокими узкими  окнами.  На  стенах
горят факелы, а  в  тупиках  коридоров  и  на  шатких  мостках  над  глубокими
каменными шахтами стоят враги с обнаженными мечами  -  с  ними  фигурка  может
сражаться, если нажимать клавишу  "Shift".  Если  нажимать  некоторые  клавиши
одновременно с другими, фигурка может подпрыгивать  и  подтягиваться,  висеть,
качаясь, на краю, и даже может с разбега перепрыгивать  каменные  колодцы,  из
дна которых  торчат  острые  шипы.  У  игры  много  уровней,  с  нижних  можно
переходить вверх, а с высших проваливаться вниз - при этом меняются  коридоры,
меняются ловушки, по другому выглядят кувшины, из которых фигурка пьет,  чтобы
восстановить свои жизненные силы, но все остается по прежнему - фигурка  бежит
среди каменных плит, факелов, черепов на полу и рисунков на стенах. Цель  игры
- подняться до последнего уровня, где  ждет  принцесса,  но  для  этого  нужно
посвятить игре очень много времени. Собственно говоря, чтобы добиться  в  игре
успеха, надо забыть, что нажимаешь на кнопки, и стать этой фигуркой  самому  -
только тогда у нее появится степень проворства, необходимая, чтобы  фехтовать,
проскакивать через щелкающие в узких каменных  коридорах  разрезалки  пополам,
перепрыгивать дыры в полу и бежать  по  срывающимся  вниз  плитам,  каждая  из
которых способна выдержать вес тела только секунду, хотя никакого тела  и  тем
более веса у фигурки нет, как нет его, если вдуматься, и у  срывающихся  плит,
как бы убедителен ни казался издаваемый ими при падении стук.
   Принц бежал по каменному карнизу; надо было успеть  подлезть  под  железную
решетку до того, как  она  опустится,  потому  что  за  ней  стоял  узкогорлый
кувшин, а сил почти не было: сзади остались два колодца с шипами, да и  прыжок
со второго яруса на усеянный каменными обломками пол тоже стоил  немало.  Саша
нажал "Right" и сразу же за ней "Down", и  принц  каким-то  чудом  пролез  под
решеткой, спустившуюся уже почти наполовину. Картинка на экране сменилась,  но
вместо  кувшина  на  мостике  впереди  стоял   жирный   воин   в   тюрбане   и
гипнотизирующе глядел на Сашу.
   -  Лапин!  -  раздался  сзади  отвратительно  знакомый  голос,  и  у   Саши
перехватило под ложечкой, хотя совершенно  никакого  объективного  повода  для
страха не было.
   - Да, Борис Григорьевич?
   - А зайди-ка ко мне.
   Кабинет Бориса Григорьевича на самом деле никаким кабинетом не был,  а  был
просто частью комнаты, отгороженной несколькими невысокими  шкафами,  и  когда
Борис Григорьевич ходил по  своей  территории,  над  поверхностью  шкафов  был
виден его лысый  затылок,  отчего  Саше  иногда  казалось,  что  он  сидит  на
корточках возле бильярда и наблюдает за  движением  единственного  оставшегося
шара, частично скрытого бортом. После обеда Борис Григорьевич  обычно  попадал
в лузу, а с утра, в  золотое  время,  большей  частью  отскакивал  от  бортов,
причем роль кия играл телефон,  звонки  которого  заставляли  полусферу  цвета
слоновой кости над заваленной бумагами поверхностью шкафа двигаться  некоторое
время быстрее.
   Саша ненавидел  Бориса  Григорьевича  той  особой  длительной  и  спокойной
ненавистью, которая знакома только живущим у жестокого хозяина сиамским  котам
и  читавшим  Оруэлла  советским  инженерам.  Саша  всего  Оруэлла   прочел   в
институте, еще когда было нельзя,  и  с  тех  пор  каждый  день  находил  уйму
поводов, чтобы с кривой улыбкой покачать головой.  Вот  и  сейчас,  подходя  к
проходу между двух шкафов, он криво улыбнулся предстоящему разговору.
   Борис  Григорьевич  стоял  у  окна  и,  подолгу   замирая   в   каждом   из
промежуточных  положений,  отрабатывал  удар  "полет  ласточки",   причем   не
бамбуковой палкой, как совсем  недавно,  когда  он  только  начинал  осваивать
"Будокан", а настоящим самурайским  мечом.  Сегодня  на  нем  была  "охотничья
одежда" из зеленого атласа, под которой виднелось мятое  кимоно  из  узорчатой
ткани синобу. Когда Саша вошел, он бережно положил меч на подоконник,  сел  на
циновку и указал на соседнюю. Саша, с трудом подвернув под себя  ноги,  сел  и
поместил свой взгляд  на  плакат  фирмы  "Хонда"  с  мотоциклистом  в  высоких
кожаных сапогах, второй год делающим вираж на стенке шкафа справа  от  циновки
Бориса Григорьевича. Борис Григорьевич положил  ладонь  на  процессорный  блок
своей "эйтишки" - такой  же,  как  у  Саши,  только  с  винтом  в  восемьдесят
мегабайт, - и закрыл глаза, размышляя, как построить беседу.
   - Читал последние "Аргументы"? - спросил он через минуту.
   - Нет, - ответил Саша, - я не выписываю.
   - Зря, - сказал Борис  Григорьевич,  поднимая  с  пола  свернутые  листы  и
потряхивая ими в воздухе, - отличная газета.  Я  не  понимаю,  на  что  только
коммунисты надеются?  Пятьдесят  миллионов  человек  загубили,  и  сейчас  еще
что-то бормочут. Все же всем ясно.
   - Ага, - сказал Саша.
   - Или вот, - сказал Борис Григорьевич, -  в  Америке  около  тысячи  женщин
беременны от инопланетян. У нас тоже таких полно, но их КГБ где-то прячет.
   "Чего он хочет-то?" - с тоской подумал Саша.
   Борис Григорьевич задумался.
   - Странный ты парень, Саня, - наконец, сказал он. - Глядишь бирюком,  ни  с
кем из отдела не дружишь. Ведь ты знаешь, люди вокруг, не мебель. А  ты  вчера
Люсю напугал даже.  Она  сегодня  мне  говорит:"Знаете,  Борис  Григорич,  как
хотите, а мне с ним в лифте одной страшно ездить."
   - Я с ней в лифте ни разу не ездил, - сказал Саша.
   - Так поэтому и боится, - сказал Борис  ГригорьевиЧ»
        """,
        "description": "Постмодернизм, ирония, философские размышления, игра с реальностью"
    },
    "nabokov": {
        "name": "В.В. Набоков",
        "fragment": """
Фрагмент из "Лолиты":
«Лолита, свет моей жизни, огонь моих чресел. Грех мой, душа моя. Ло-ли-та: кончик языка совершает путь в три шажка вниз по нёбу, чтобы на третьем толкнуться о зубы. Ло. Ли. Та. 
Она была Ло утром, стоя во весь свой рост в четыре фута десять дюймов, в одном носке. Она была Лола в штанах. Она была Долли в школе. Она была Долорес на пунктире официальных документов. 
Но в моих объятиях она всегда была Лолитой. Разве не случалось тебе, в летний час, услышать где-то вдали гул невидимой машины и, прислушавшись, понять, 
что это всего лишь кровь, гудевшая в твоих ушах? Разве не случалось тебе касаться чего-либо — скажем, подушки — и ощущать, будто твоя рука спит?»
        """,
        "description": "Лирическая проза, виртуозное владение языком, сложные метафоры, психологическая тонкость"
    }
}

# Базовый промпт для создания структуры рассказа
STRUCTURE_PROMPT = """
Ты - профессиональный писатель и сценарист. На основе предоставленных пользователем данных создай подробную структуру рассказа.

## Задача:
Создать оригинальную структуру рассказа в жанре {genre} с сеттингом: {setting}
{alias_text}
{style_instruction}

## Требования к структуре:
1. **Структура сюжета** (по канонам "завязка-кульминация-развязка и финал"):
   - Часть 1: Завязка - представление мира и персонажей, начало конфликта
   - Часть 2: Кульминация - развитие конфликта, ключевые события
   - Часть 3: Развязка и финал - разрешение основных противоречий, заключительная часть

2. **Детальный план частей** (3 части, объем каждой части не менее 8000 слов):
   Для каждой части укажи:
   - Название части
   - Действующие лица
   - Синопсис: основные события и конфликты
   - Локации действия
   - Участвующие предметы/артефакты
   - Примерный объем в словах

3. **Персонажи** (для каждого):
   - Имя и краткое описание
   - Характер, мотивация
   - Внутренний конфликт
   - Роль и движущая сила в сюжете
   - Как завершается путь персонажа в сюжете (если применимо)

4. **Локации** - описание ключевых мест действия

5. **Предметы/артефакты** - значимые объекты в сюжете

6. **Краткая концовка** - общее направление финала

Структура должна быть достаточно детальной, чтобы служить основой для написания полного текста рассказа.
"""

# Промпт для генерации отдельных частей с учетом предыдущего контекста
CHAPTER_PROMPT = """
Ты - профессиональный писатель. Напиши часть рассказа на основе предоставленной структуры и ПРЕДЫДУЩИХ ЧАСТЕЙ.
{style_instruction}

## КОНТЕКСТ ПРОИЗВЕДЕНИЯ:
Жанр: {genre}
Сеттинг: {setting}
{alias_text}

## ПОЛНАЯ СТРУКТУРА ПРОИЗВЕДЕНИЯ:
{structure}

## ПРЕДЫДУЩИЕ ЧАСТИ (для контекста и преемственности):
{previous_chapters_context}

## ТЕКУЩАЯ ЧАСТЬ {chapter_number} - ДЕТАЛИ:
{chapter_details}

## КРИТИЧЕСКИ ВАЖНЫЕ ТРЕБОВАНИЯ:
- Объем: примерно {word_count} слов
- Стиль: соответствие жанру {genre} и авторскому стилю {instruction}, но без цитирования текста стилизуемого автора
- Сюжет: НЕ ОТКЛОНЯЙСЯ от полной структуры произведения, списка персонажей
- Локации, предметы: используй локации и предметы из сгенерированной структуры произведения {structure}
- УЧТИ ВСЕ СОБЫТИЯ, ДИАЛОГИ И РАЗВИТИЕ ПЕРСОНАЖЕЙ ИЗ ПРЕДЫДУЩИХ ЧАСТЕЙ
- ОБЕСПЕЧЬ ПЛАВНЫЕ ПЕРЕХОДЫ И ЛОГИЧЕСКУЮ ПРЕЕМСТВЕННОСТЬ С ПРЕДЫДУЩИМИ ЧАСТЯМИ
- Развивай сюжетные линии, начатые в предыдущих частях
- Используй установленные характеры персонажей последовательно
- Развивай конфликты, заложенные ранее
- Используй указанные локации и предметы согласно общей структуре
- Естественные диалоги, учитывающие предыдущие взаимодействия персонажей
- НЕ ЗЛОУПОТРЕБЛЯЙ ДИАЛОГАМИ, БОЛЬШЕ ДЕЙСТВИЯ И ОПИСАНИЙ
- МЕНЬШЕ ШТАМПОВ И КЛИШЕ, БОЛЬШЕ ОРИГИНАЛЬНЫХ ИДЕЙ И НЕОЖИДАННЫХ СЮЖЕТНЫХ ПОВОРОТОВ
- НЕ ВОСПРОИЗВОДИ В ТЕКСТЕ ПРОМПТЫ И СОДЕРЖАНИЕ ПРЕДЫДУЩИХ ЧАСТЕЙ
- ИЗБЕГАЙ НЕНУЖНОГО ПАФОСА ВРОДЕ ["ЕГО БОРЬБА ЗА СПРАВЕДЛИВОСТЬ ТОЛЬКО НАЧИНАЛАСЬ", "ЭТО БЫЛО ЧТО-ТО НЕВЕРОЯТНОЕ"]
- ИЗБЕГАЙ НЕРВОЗНЫХ ПОВТОРЯЮЩИХСЯ ФРАЗ ВРОДЕ 'ОНА СДЕЛАЛА ЭТО', 'ОНА БЫЛА ГОТОВА'
- ЕСЛИ СОЗДАВАЕМАЯ ЧАСТЬ НЕ ФИНАЛЬНАЯ, А ЗАВЯЗКА ИЛИ КУЛЬМИНАЦИЯ, ТО НЕ ДОПУСКАЙ В НЕЙ ЗАВЕРШЕНИЯ СЮЖЕТА, СЮЖЕТ ДОЛЖЕН ЗАВЕРШИТЬСЯ ПОЗЖЕ.

Напиши полный текст части {chapter_number}, начиная непосредственно с повествования, КОТОРОЕ ЛОГИЧЕСКИ ВЫТЕКАЕТ ИЗ ПРЕДЫДУЩИХ ЧАСТЕЙ.
"""

# Промпт для литературного редактора
EDITOR_PROMPT = """
Ты вдумчиво и с фантазией редактируешь художественный рассказ как редактор и соавтор. Проанализируй представленную часть и перепиши ее, обогатив деталями описания событий, чувств и мыслей персонажей, РЕШИТЕЛЬНО ИСПРАВИВ следующие ошибки:

1. Бредовые повторяющиеся по смыслу реплики персонажей и однотипные фразы
2. Тривиальные описания событий и поступков без деталей
3. Трюизмы, тавтологию
4. Повторяющиеся цепочки коротких односложных выражений вроде [она была, она знала, она была готова, она понимала, она знала, он посмотрел, он отвернулся, он был готов]
5. Нестыковки со структурой сюжета {structure}, выпавшие из сюжета локации, персонажей, предметы
6. Скудные, плоские, картонные описания характеров персонажей вроде [он был подлецом, она выглядела молодо]. Описания характеров должны быть развернутыми при первом упоминании персонажей, и не повторяться в тексте.

{style_instruction}

## КОНТЕКСТ ПРОИЗВЕДЕНИЯ:
Жанр: {genre}
Сеттинг: {setting}
{alias_text}

## СТРУКТУРА ПРОИЗВЕДЕНИЯ:
{structure}

## ПРЕДЫДУЩИЕ ЧАСТИ (для контекста):
{previous_chapters_context}

## ТЕКУЩАЯ ЧАСТЬ {chapter_number} ДЛЯ РЕДАКТУРЫ:
{chapter_text}

## ЗАДАЧА:
Перепиши часть, сохраняя сюжет и ключевые события, но улучшая литературное качество:
- Обогати описания деталями
- Углуби психологию персонажей через их мысли и чувства
- Убери повторяющиеся и шаблонные фразы
- Добавь оригинальности и выразительности
- Сохрани общий стиль и тон произведения
- ОБЕСПЕЧЬ ПРЕЕМСТВЕННОСТЬ С ПРЕДЫДУЩИМИ ЧАСТЯМИ
- ПРИВЕДИ В СООТВЕТСТВИЕ СТРУКТУРЕ СЮЖЕТА
- УБЕРИ ЛОЖНЫЕ КУЛЬМИНАЦИИ И ЛОЖНЫЕ КОНЦОВКИ, НЕ СООТВЕТСТВУЮЩИЕ КРАТКОМУ ОПИСАНИЮ В СТРУКТУРЕ СЮЖЕТА

Верни только улучшенный текст части без дополнительных комментариев.
"""

# Промпт для рецензии критика
CRITIQUE_PROMPT = """
Напиши рецензию на мой текст:

{full_story}

Твой тон — строгий, профессиональный, лишенный сентиментальности.
Твой анализ — точный и безжалостный к слабым местам.
Твоя критика всегда конструктивна. Ты не просто указываешь на ошибку, а объясняешь, почему это ошибка, и как её можно исправить.
Для анализа и вынесения вердиктов ты используешь медицинскую, хирургическую или юридическую метафорику (например: "Диагноз: ...", "Протокол вскрытия:", "Вердикт: ..."). 
Поставь тексту оценку от 10 - отлично до 0 - кошмарно.
"""

def get_style_instruction(selected_style):
    """Возвращает инструкцию по стилю в зависимости от выбранного автора"""
    if selected_style == "none":
        return "", ""
    
    author = AUTHOR_STYLES[selected_style]
    instruction = f"\n\n## СТИЛИСТИЧЕСКИЕ ТРЕБОВАНИЯ:\nИспользуй стиль автора согласно представленному фрагменту из {author['name']}:\n{author['fragment']}\n\nСтрого следуй стилистике, языковым особенностям и манере повествования данного автора, но без прямых цитат."
    
    return instruction, author['description']

def generate_structure(genre, setting, alias, temperature, style_instruction):
    """Генерирует структуру рассказа с заданной температурой"""
    try:
        alias_text = f"Дополнительная идея пользователя: {alias}" if alias else ""
        
        prompt = STRUCTURE_PROMPT.format(
            genre=genre,
            setting=setting,
            alias_text=alias_text,
            style_instruction=style_instruction
        )
        
        model = genai.GenerativeModel('gemini-2.0-flash-lite')
        
        # Используем настройки генерации с заданной температурой
        generation_config = genai.types.GenerationConfig(
            temperature=temperature,
            top_p=0.8,
            top_k=40
        )
        
        response = model.generate_content(
            prompt,
            generation_config=generation_config
        )
        
        return response.text
    except Exception as e:
        st.error(f"Ошибка при генерации структуры: {str(e)}")
        return None

def generate_chapter(genre, setting, alias, structure, previous_chapters_context, chapter_number, chapter_details, word_count, style_instruction):
    """Генерирует отдельную часть рассказа с учетом всех предыдущих частей"""
    try:
        alias_text = f"Дополнительная идея пользователя: {alias}" if alias else ""
        
        # Формируем контекст предыдущих частей
        if not previous_chapters_context:
            previous_chapters_context = "Это первая часть, предыдущих частей нет."
        
        prompt = CHAPTER_PROMPT.format(
            genre=genre,
            setting=setting,
            alias_text=alias_text,
            structure=structure,
            previous_chapters_context=previous_chapters_context,
            chapter_number=chapter_number,
            chapter_details=chapter_details,
            word_count=word_count,
            style_instruction=style_instruction
        )
        
        model = genai.GenerativeModel('gemini-2.0-flash-lite')
        
        # Фиксированные настройки для генерации частей - низкая температура для консистентности
        generation_config = genai.types.GenerationConfig(
            temperature=0.3,  # Низкая температура для последовательности
            top_p=0.7,
            top_k=20
        )
        
        response = model.generate_content(
            prompt,
            generation_config=generation_config
        )
        
        return response.text
    except Exception as e:
        st.error(f"Ошибка при генерации части {chapter_number}: {str(e)}")
        return None

def literary_edit_chapter(genre, setting, alias, structure, previous_chapters_context, chapter_number, chapter_text, style_instruction):
    """Редактирует часть с помощью литературного редактора"""
    try:
        alias_text = f"Дополнительная идея пользователя: {alias}" if alias else ""
        
        # Формируем контекст предыдущих частей
        if not previous_chapters_context:
            previous_chapters_context = "Это первая часть, предыдущих частей нет."
        
        prompt = EDITOR_PROMPT.format(
            genre=genre,
            setting=setting,
            alias_text=alias_text,
            structure=structure,
            previous_chapters_context=previous_chapters_context,
            chapter_number=chapter_number,
            chapter_text=chapter_text,
            style_instruction=style_instruction
        )
        
        model = genai.GenerativeModel('gemini-2.0-flash-lite')
        
        # Настройки для редактор - средняя температура для баланса креативности и сохранения сюжета
        generation_config = genai.types.GenerationConfig(
            temperature=0.5,
            top_p=0.8,
            top_k=30
        )
        
        response = model.generate_content(
            prompt,
            generation_config=generation_config
        )
        
        return response.text
    except Exception as e:
        st.error(f"Ошибка при редактировании части {chapter_number}: {str(e)}")
        return chapter_text  # Возвращаем оригинальный текст в случае ошибки

def parse_structure_for_chapters(structure_text):
    """Парсит структуру для извлечения информации о частях"""
    parts = []
    
    lines = structure_text.split('\n')
    current_part = None
    
    for line in lines:
        line = line.strip()
        if line.lower().startswith('часть') or line.lower().startswith('part'):
            if current_part:
                parts.append(current_part)
            current_part = {"title": line, "details": ""}
        elif current_part and line:
            current_part["details"] += line + "\n"
    
    if current_part:
        parts.append(current_part)
    
    # Если не удалось распарсить, создаем базовую структуру из 3 частей
    if not parts or len(parts) != 3:
        parts = [
            {"title": "Часть 1: Завязка", "details": "Знакомство с главным героем и миром, начало конфликта"},
            {"title": "Часть 2: Кульминация", "details": "Развитие конфликта, ключевые события и поворотные моменты"},
            {"title": "Часть 3: Развязка и финал", "details": "Разрешение основных противоречий, заключительная часть"}
        ]
    
    return parts

def generate_critique(full_story):
    """Генерирует рецензию от беспощадного критика"""
    try:
        # Ограничиваем длину текста для избежания переполнения контекста
        if len(full_story) > 100000:  # Примерное ограничение
            full_story = full_story[:100000] + "\n\n[Текст сокращен для рецензии...]"
        
        prompt = CRITIQUE_PROMPT.format(full_story=full_story)
        
        model = genai.GenerativeModel('gemini-2.0-flash')
        
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,  # Средняя температура для баланса строгости и креативности
            top_p=0.8,
            top_k=40,
            max_output_tokens=2000  # Ограничиваем длину ответа
        )
        
        response = model.generate_content(
            prompt,
            generation_config=generation_config
        )
        
        return response.text
    except Exception as e:
        st.error(f"Ошибка при генерации рецензии: {str(e)}")
        return None

def main():
    st.set_page_config(
        page_title="Графоманъ: Генератор рассказов",
        page_icon="📖",
        layout="wide"
    )
    
    st.title("📖 Графоманъ: Генератор рассказов")
    st.markdown("Создавайте увлекательные рассказы в заданном жанре и сеттинге")
    
    # Инициализация session_state
    if 'current_step' not in st.session_state:
        st.session_state.current_step = 1  # 1: параметры, 2: генерация, 3: результат
    
    if 'full_story' not in st.session_state:
        st.session_state.full_story = ""
    
    if 'edited_story' not in st.session_state:
        st.session_state.edited_story = ""  # Для хранения отредактированной версии
    
    if 'critique' not in st.session_state:
        st.session_state.critique = None
    
    if 'is_generating_critique' not in st.session_state:
        st.session_state.is_generating_critique = False
        
    if 'structure' not in st.session_state:
        st.session_state.structure = None
        
    if 'parts_info' not in st.session_state:
        st.session_state.parts_info = []
        
    if 'current_part' not in st.session_state:
        st.session_state.current_part = 0
        
    if 'previous_chapters_context' not in st.session_state:
        st.session_state.previous_chapters_context = ""  # Контекст всех предыдущих частей
        
    if 'selected_style' not in st.session_state:
        st.session_state.selected_style = "none"
    
    # Шаг 1: Параметры рассказа
    if st.session_state.current_step == 1:
        st.header("1. Параметры рассказа")
        
        col1, col2 = st.columns(2)
        
        with col1:
            genre = st.text_input(
                "Жанр произведения:",
                placeholder="например: фэнтези, научная фантастика, детектив, роман...",
                help="Укажите основной жанр вашего рассказа"
            )
        
        with col2:
            setting = st.text_input(
                "Сеттинг (место и время действия):",
                placeholder="например: средневековое королевство, космическая станция в 2250 году...",
                help="Опишите мир, в котором происходит действие"
            )
        
        # Выбор стиля автора
        st.header("🎭 Стиль автора")
        st.info("Выберите стиль известного писателя для вашего рассказа")
        
        # Инициализация selected_style если не существует
        if 'selected_style' not in st.session_state:
            st.session_state.selected_style = "none"
        
        # Создаем колонки для кнопок стилей
        style_col1, style_col2, style_col3, style_col4 = st.columns(4)
        
        with style_col1:
            if st.button("📚 Без стиля", use_container_width=True, key="style_none"):
                st.session_state.selected_style = "none"
                st.rerun()
        with style_col2:
            if st.button("⚜️ Толстой", use_container_width=True, key="style_tolstoy"):
                st.session_state.selected_style = "tolstoy"
                st.rerun()
        with style_col3:
            if st.button("🌀 Пелевин", use_container_width=True, key="style_pelevin"):
                st.session_state.selected_style = "pelevin"
                st.rerun()
        with style_col4:
            if st.button("🦋 Набоков", use_container_width=True, key="style_nabokov"):
                st.session_state.selected_style = "nabokov"
                st.rerun()
        
        # Визуальное отображение выбранного стиля
        st.markdown("---")
        
        # Показываем выбранный стиль
        if st.session_state.selected_style != "none":
            author = AUTHOR_STYLES[st.session_state.selected_style]
            st.success(f"**Выбран стиль:** {author['name']}")
            st.info(f"**Описание стиля:** {author['description']}")
            
            with st.expander("📖 Посмотреть фрагмент стиля"):
                st.text_area("Фрагмент произведения:", author['fragment'], height=200, key=f"fragment_{st.session_state.selected_style}")
        else:
            st.info("⚪ Стиль не выбран - будет использован нейтральный литературный стиль")
        
        # Ползунок фантазии
        st.header("2. Настройки творчества")
        
        creativity = st.slider(
            "Уровень фантазии писателя:",
            min_value=0.1,
            max_value=1.0,
            value=0.7,
            step=0.1,
            help=(
                "Низкое значение = более предсказуемый сюжет, строгое следование жанру\n"
                "Высокое значение = более креативный и неожиданный сюжет, возможны смешения жанров"
            )
        )
        
        # Отображаем пояснение к уровню фантазии
        creativity_descriptions = {
            0.1: "🤖 Максимальная предсказуемость - строгое следование канонам жанра",
            0.2: "📚 Консервативный подход - минимальные отклонения от стандартов",
            0.3: "📝 Умеренный реализм - баланс между традиционностью и творчеством", 
            0.4: "🎭 Сбалансированный - классический подход с элементами новизны",
            0.5: "✨ Стандартная креативность - хороший баланс предсказуемости и неожиданностей",
            0.6: "🌟 Творческий - заметные элементы оригинальности в сюжете",
            0.7: "🚀 Высокая фантазия - значительные творческие отклонения от шаблонов",
            0.8: "🎨 Очень креативный - смелые сюжетные повороты и нестандартные решения",
            0.9: "🔥 Экспериментальный - высокий уровень неожиданных событий",
            1.0: "⚡ Максимальная креативность - полностью оригинальный и непредсказуемый сюжет"
        }
        
        # Показываем описание для текущего значения
        current_description = creativity_descriptions.get(creativity, "Сбалансированный подход")
        st.info(f"**Текущий уровень:** {current_description}")
        
        st.header("3. Дополнительная идея (опционально)")
        alias = st.text_area(
            "Дополнительная идея или концепция:",
            height=100,
            placeholder="например: история о программисте, попавшем в мир магии, где технологии заменяют заклинания...",
            help="Любые дополнительные пожелания или идеи для сюжета"
        )
        
        # Сохраняем параметры в session_state
        st.session_state.genre = genre
        st.session_state.setting = setting
        st.session_state.creativity = creativity
        st.session_state.alias = alias
        
        # Кнопка перехода к генерации
        if st.button("🎭 Начать создание рассказа", type="primary", key="start_creation"):
            if not genre or not setting:
                st.warning("⚠️ Пожалуйста, заполните жанр и сеттинг")
            else:
                st.session_state.current_step = 2
                st.rerun()
    
    # Шаг 2: Генерация рассказа
    elif st.session_state.current_step == 2:
        genre = st.session_state.genre
        setting = st.session_state.setting
        creativity = st.session_state.creativity
        alias = st.session_state.alias
        selected_style = st.session_state.selected_style
        
        st.header("🔄 Генерация рассказа")
        st.info(f"**Параметры:** Жанр: {genre}, Сеттинг: {setting}, Фантазия: {creativity}")
        
        if selected_style != "none":
            author_name = AUTHOR_STYLES[selected_style]['name']
            st.info(f"🎨 **Стиль автора:** {author_name}")
        
        # Получаем инструкцию по стилю
        style_instruction, style_description = get_style_instruction(selected_style)
        
        # Генерация структуры (только если еще не сгенерирована)
        if st.session_state.structure is None:
            with st.spinner("📐 Создаю структуру произведения..."):
                structure = generate_structure(genre, setting, alias, creativity, style_instruction)
                
                if not structure:
                    st.error("❌ Не удалось создать структуру произведения")
                    if st.button("🔄 Попробовать снова"):
                        st.rerun()
                    return
                
                st.session_state.structure = structure
                st.success("✅ Структура произведения создана!")
        
        # Отображаем структуру
        st.divider()
        st.header("📋 Структура произведения")
        st.text_area("Структура:", st.session_state.structure, height=400, key="structure_display")
        
        # Парсим структуру для получения информации о частях (только если еще не распарсена)
        if not st.session_state.parts_info:
            st.session_state.parts_info = parse_structure_for_chapters(st.session_state.structure)
        
        # Генерация частей
        st.divider()
        st.header("🖋️ Написание частей")
        st.info("📝 Каждая часть генерируется с учетом текста ВСЕХ предыдущих частей для обеспечения последовательности сюжета")
        
        parts_count = len(st.session_state.parts_info)
        words_per_part = 8000  # Примерный объем на часть
        
        # Показываем прогресс
        progress_bar = st.progress(st.session_state.current_part / parts_count)
        status_text = st.empty()
        
        # Если все части уже сгенерированы, переходим к шагу 3
        if st.session_state.current_part >= parts_count:
            st.session_state.current_step = 3
            st.success("🎉 Рассказ успешно создан и отредактирован!")
            st.rerun()
            return
        
        # Генерируем текущую часть
        part_num = st.session_state.current_part
        part_info = st.session_state.parts_info[part_num]
        part_details = f"{part_info['title']}\n{part_info['details']}"
        
        # Показываем текущую часть в интерфейсе
        st.subheader(f"Часть {part_num + 1}: {part_info['title']}")
        st.write(part_info['details'])
        
        status_text.text(f"Пишу часть {part_num + 1} из {parts_count}...")
        
        # Генерируем часть с учетом ВСЕХ предыдущих частей
        part_text = generate_chapter(
            genre, setting, alias, st.session_state.structure,
            st.session_state.previous_chapters_context,  # Передаем контекст всех предыдущих частей
            part_num + 1, 
            part_details, 
            words_per_part,
            style_instruction
        )
        
        if part_text:
            # Отправляем часть на литературное редактирование
            with st.spinner(f"✏️ Редактирую часть {part_num + 1}..."):
                edited_part_text = literary_edit_chapter(
                    genre, setting, alias, st.session_state.structure,
                    st.session_state.previous_chapters_context,  # Контекст всех предыдущих частей
                    part_num + 1,
                    part_text,
                    style_instruction
                )
            
            # Добавляем оригинальную часть к полному тексту
            st.session_state.full_story += f"\n\nЧАСТЬ {part_num + 1}: {part_info['title']}\n\n{part_text}"
            
            # Добавляем отредактированную часть к финальному тексту
            st.session_state.edited_story += f"\n\nЧАСТЬ {part_num + 1}: {part_info['title']}\n\n{edited_part_text}"
            
            # ОБНОВЛЯЕМ КОНТЕКСТ ПРЕДЫДУЩИХ ЧАСТЕЙ - добавляем текущую отредактированную часть
            if st.session_state.previous_chapters_context:
                st.session_state.previous_chapters_context += f"\n\n--- ЧАСТЬ {part_num + 1} ---\n{edited_part_text}"
            else:
                st.session_state.previous_chapters_context = f"--- ЧАСТЬ {part_num + 1} ---\n{edited_part_text}"
            
            st.success(f"✅ Часть {part_num + 1} завершена и отредактирована")
            
            # Переходим к следующей части
            st.session_state.current_part += 1
            
            # Обновляем прогресс
            progress_bar.progress(st.session_state.current_part / parts_count)
            
            # Автоматически перезагружаем страницу для генерации следующей части
            st.rerun()
            
        else:
            st.error(f"❌ Ошибка при написании части {part_num + 1}")
            if st.button("🔄 Попробовать снова"):
                st.rerun()
    
    # Шаг 3: Результат и рецензия
    elif st.session_state.current_step == 3:
        st.header("📘 Готовый рассказ")
        
        # Показываем выбранный стиль
        if st.session_state.selected_style != "none":
            author_name = AUTHOR_STYLES[st.session_state.selected_style]['name']
            st.success(f"🎨 **Стиль автора:** {author_name}")
        
        # Переключатель между оригинальной и отредактированной версией
        version = st.radio(
            "Выберите версию для просмотра:",
            ["📝 Отредактированная версия (рекомендуется)", "⚪ Оригинальная версия"],
            index=0
        )
        
        # Выбираем какую версию показывать
        display_story = st.session_state.edited_story if version.startswith("📝") else st.session_state.full_story
        
        # Отображаем полный рассказ
        st.text_area("Полный текст рассказа:", display_story, height=600, key="full_story_display")
        
        # Статистика
        word_count = len(display_story.split())
        st.sidebar.header("📊 Статистика")
        st.sidebar.write(f"Общий объем: {word_count} слов")
        st.sidebar.write(f"Уровень фантазии: {st.session_state.creativity}")
        st.sidebar.write(f"Версия: {'Отредактированная' if version.startswith('📝') else 'Оригинальная'}")
        if st.session_state.selected_style != "none":
            st.sidebar.write(f"Стиль: {AUTHOR_STYLES[st.session_state.selected_style]['name']}")
        
        # Кнопки экспорта
        st.divider()
        st.header("💾 Экспорт результата")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Скачивание как TXT
            b64_txt = base64.b64encode(display_story.encode()).decode()
            version_suffix = "_отредактированная" if version.startswith("📝") else "_оригинальная"
            style_suffix = f"_{st.session_state.selected_style}" if st.session_state.selected_style != "none" else ""
            href_txt = f'<a href="data:file/txt;base64,{b64_txt}" download="рассказ_{st.session_state.genre}{style_suffix}{version_suffix}.txt">📥 Скачать как TXT</a>'
            st.markdown(href_txt, unsafe_allow_html=True)
        
        with col2:
            # Копирование в буфер обмена
            if st.button("📋 Скопировать в буфер обмена", key="copy_full"):
                st.code(display_story, language="markdown")
                st.success("Текст скопирован в буфер обмена!")

        # Рецензия от критика
        st.divider()
        st.header("🎯 Рецензия от Беспощадного Критика")
        
        # Если рецензия уже сгенерирована, показываем ее
        if st.session_state.critique:
            st.subheader("Рецензия от Беспощадного Критика")
            st.text_area("", st.session_state.critique, height=400, key="critique_display")
            
            # Кнопка для копирования рецензии
            if st.button("📋 Скопировать рецензию", key="copy_critique"):
                st.code(st.session_state.critique, language="markdown")
                st.success("Рецензия скопирована в буфер обмена!")
            
            # Кнопка для обновления рецензии
            if st.button("🔄 Обновить рецензию", key="refresh_critique"):
                st.session_state.critique = None
                st.session_state.is_generating_critique = False
                st.rerun()
        
        # Если рецензия генерируется - показываем спиннер и запускаем генерацию
        elif st.session_state.is_generating_critique:
            with st.spinner("🔍 Критик анализирует произведение... Это может занять несколько минут"):
                # Используем отредактированную версию для рецензии
                critique = generate_critique(st.session_state.edited_story)
                if critique:
                    st.session_state.critique = critique
                    st.session_state.is_generating_critique = False
                    st.rerun()  # Перезагружаем для отображения результата
                else:
                    st.error("❌ Не удалось получить рецензию")
                    st.session_state.is_generating_critique = False
                    st.rerun()
        
        # Если рецензия еще не запрашивалась
        else:
            st.info("""
            **Получите профессиональную рецензию на ваш рассказ:**
            - Строгий анализ сильных и слабых сторон
            - Конструктивные рекомендации по улучшению
            - Оценка по 10-балльной шкале
            - Профессиональная критика с медицинской/юридической метафорикой
            """)
            
            if st.button("📝 Получить рецензию от Беспощадного Критика", type="secondary"):
                st.session_state.is_generating_critique = True
                st.rerun()
        
        # Кнопка для создания нового рассказа
        st.divider()
        if st.button("🔄 Создать новый рассказ", type="primary"):
            # Полностью сбрасываем состояние
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()

    # Информационная панель
    st.sidebar.header("🎛️ Настройки генерации")
    st.sidebar.info("""
    **Температура генерации:**
    - **Структура:** регулируется ползунком (0.1-1.0)
    - **Части:** фиксированная 0.3 для консистентности
    - **Редактор:** фиксированная 0.5 для баланса
    
    🔥 Высокая температура = больше креативности
    ❄️ Низкая температура = больше предсказуемости
    """)
    
    st.sidebar.header("🎭 Стили авторов")
    st.sidebar.info("""
    **Доступные стили:**
    - **Толстой:** Психологическая глубина, эпический размах
    - **Пелевин:** Постмодернизм, ирония, философские размышления  
    - **Набоков:** Лирическая проза, виртуозное владение языком
    
    Стиль влияет на все этапы генерации: структуру, части и редактуру.
    """)
    
    st.sidebar.header("ℹ️ О приложении")
    st.sidebar.info("""
    **Генератор рассказов** создает литературные произведения 
    на основе заданных параметров.
    
    **Как использовать:**
    1. Укажите жанр и сеттинг
    2. Выберите стиль автора (опционально)
    3. Настройте уровень фантазии
    4. Добавьте дополнительную идею (по желанию)
    5. Нажмите "Начать создание рассказа"
    6. Получите структуру и полный текст
    """)

if __name__ == "__main__":
    main()
