import streamlit as st
import google.generativeai as genai
import time
import traceback
import re
from docx import Document
from io import BytesIO
from fpdf import FPDF
import base64
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API
api_key = "AIzaSyCGC2JB3BgfBMycbt4us1eq6D5exNOvKT8"
if not api_key:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á")
    st.stop()

genai.configure(
    api_key=api_key,
    transport='rest',
    client_options={
        'api_endpoint': 'generativelanguage.googleapis.com/'
    }
)

model = genai.GenerativeModel('gemini-2.0-flash')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'current_doc_text' not in st.session_state:
    st.session_state.current_doc_text = ""
if 'processing' not in st.session_state:
    st.session_state.processing = False
if 'report_content' not in st.session_state:
    st.session_state.report_content = None

REASONING_STEPS = [
    "–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query} –∏ –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–æ–±–ª–µ–º—É. –ü—Ä–∏–¥—É–º–∞–π –ø—è—Ç—å —Å—Ö–æ–¥–Ω—ã—Ö –ø–æ —Å–º—ã—Å–ª—É –∫–æ–Ω—Ü–µ–ø—Ü–∏–π-—Ç–µ–∑–∏—Å–æ–≤ –∏–∑ —Å–º–µ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥ Tree of Thoughts",
    "–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: –≥–∏–ø–æ—Ç–µ–∑—ã –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ {context}, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∑–Ω–∞–Ω–∏—è –∏–∑ {sys_prompt}",
    "–¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞: –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥—ã. –í—ã–±–µ—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ {context}, –ø–æ–¥—Ä–æ–±–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥–æ–µ –∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
def clean_text(text):
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤
    text = re.sub(r'(?<!\\)([\{\}])', r'\\\1', text)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
    text = re.sub(r'([\[\]])', r'\\\1', text)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
    text = re.sub(r'([\(\)])', r'\\\1', text)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏
    text = re.sub(r'(\$)', r'\\\1', text)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–Ω–∞–∫–∏ –¥–æ–ª–ª–∞—Ä–∞
    text = re.sub(r'(\^)', r'\\\1', text)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞—Ä–µ—Ç–∫–∏
    
    # –ó–∞–º–µ–Ω—è–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
    text = html.unescape(text)
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'[\x00-\x1F\x7F-\x9F]', ' ', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
    text = re.sub(r'\s+', ' ', text)
    
    return text.strip()

def parse_docx(uploaded_file):
    try:
        if uploaded_file is None:
            return False

        doc = Document(BytesIO(uploaded_file.getvalue()))
        full_text = "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
        st.session_state.current_doc_text = clean_text(full_text)[:400000]
        st.success(f"üìÇ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(st.session_state.current_doc_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return True
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        st.session_state.current_doc_text = ""
        return False

def create_pdf(content, title="–û—Ç—á–µ—Ç"):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    for line in content.split('\n'):
        pdf.multi_cell(0, 8, txt=line, align='L')
        pdf.ln(2)
    
    return pdf.output(dest='S').encode('latin-1')

def generate_response():
    st.session_state.processing = True
    st.session_state.report_content = None
    progress_bar = st.progress(0)
    results_container = st.container()

    try:
        query = clean_text(st.session_state.input_query.strip())
        if not query:
            st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
            return

        if not st.session_state.current_doc_text:
            st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç")
            return

        # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = (
            f"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {st.session_state.sys_prompt}\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç: {st.session_state.current_doc_text[:1000]}...\n"
            f"–ó–∞–ø—Ä–æ—Å: {query}"
        )

        responses = []
        full_report = ""
        
        with results_container:
            for step_num, step_template in enumerate(REASONING_STEPS):
                progress = int((step_num + 1) / len(REASONING_STEPS) * 100)
                progress_bar.progress(progress)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —à–∞–≥–∞
                step_prompt = step_template.format(
                    query=query,
                    context=context,
                    sys_prompt=st.session_state.sys_prompt
                )
                
                st.markdown(f"**üîπ –®–∞–≥ {step_num+1}/{len(REASONING_STEPS)}**")
                
                try:
                    response = model.generate_content(
                        step_prompt,
                        generation_config={
                            "temperature": st.session_state.temperature,
                            "max_output_tokens": 9000
                        },
                        request_options={'timeout': 120}
                    )
                    
                    result = clean_text(response.text)
                    responses.append(result)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    context += f"\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–≥–∞ {step_num+1}: {result[:500]}..."
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º Markdown
                    st.markdown(f"**‚úÖ –®–∞–≥ {step_num+1} –∑–∞–≤–µ—Ä—à–µ–Ω**")
                    st.markdown(f"```\n{result}\n```")
                    
                    full_report += f"### –®–∞–≥ {step_num+1} ###\n\n{result}\n\n{'='*50}\n\n"
                    
                except Exception as e:
                    error_msg = f"üö® –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step_num+1}: {str(e)}"
                    st.error(error_msg)
                    responses.append(error_msg)
                    full_report += f"### –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step_num+1} ###\n\n{error_msg}\n\n"

                time.sleep(1)

        st.session_state.report_content = clean_text(full_report)
        progress_bar.empty()
        st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        st.divider()
        st.subheader("–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
        st.markdown(f"```\n{st.session_state.report_content}\n```")

    except Exception as e:
        st.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        traceback.print_exc()
    finally:
        st.session_state.processing = False

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("Troubleshooter")
    st.subheader("–†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º")

    st.markdown("### –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
    sys_prompt_default = clean_text(
        "–í—ã - troubleshooter, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º. "
        "–ü–æ–º–æ–≥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø—É—Ç–∏ –µ–µ —Ä–µ—à–µ–Ω–∏—è. "
        "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤—É–π—Ç–µ—Å—å –º–µ—Ç–æ–¥–∞–º–∏ First Principles Thinking, Inversion, Pareto Principle. "
        "–û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π. "
        "–ß–∏—Å–ª–æ–≤—ã–µ —Ä—è–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ASCII-–¥–∏–∞–≥—Ä–∞–º–º. –û—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ-—Ä—É—Å—Å–∫–∏."
    )
    st.session_state.sys_prompt = st.text_area(
        label="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:",
        value=sys_prompt_default,
        height=250,
        label_visibility="collapsed"
    )

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å ---
st.title("Troubleshooter - –†–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º")
st.subheader("–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ Word")

col1, col2 = st.columns([3, 1])
with col1:
    st.text_input(
        "–í–∞—à –∑–∞–ø—Ä–æ—Å:",
        placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É...",
        key="input_query"
    )
with col2:
    st.slider(
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:",
        0.0, 1.0, 0.3, 0.1,
        key="temperature"
    )

uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:",
    type=["docx"],
    key="uploaded_file"
)

if uploaded_file:
    parse_docx(uploaded_file)

if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", disabled=st.session_state.processing):
    generate_response()

# --- –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
if st.session_state.report_content and not st.session_state.processing:
    st.divider()
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # PDF —ç–∫—Å–ø–æ—Ä—Ç
    try:
        pdf_bytes = create_pdf(st.session_state.report_content)
        if pdf_bytes:
            b64 = base64.b64encode(pdf_bytes).decode()
            filename = f"gemini_report_{time.strftime('%Y%m%d_%H%M%S')}.pdf"
            href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}">üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç</a>'
            st.markdown(href, unsafe_allow_html=True)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF: {str(e)}")

if st.session_state.processing:
    st.info("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
