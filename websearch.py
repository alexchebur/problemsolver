import streamlit as st
from duckduckgo_search import DDGS
import time
import random
import requests
from bs4 import BeautifulSoup

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö User-Agent —Å—Ç—Ä–æ–∫
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:126.0) Gecko/20100101 Firefox/126.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Safari/605.1.15",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0",
    "Mozilla/5.0 (Linux; Android 13; SM-S901B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.147 Mobile Safari/537.36",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1"
]

def get_random_user_agent():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π User-Agent"""
    return random.choice(USER_AGENTS)

def duckduckgo_html_search(query, region='ru-ru', max_results=5):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ HTML DuckDuckGo"""
    try:
        headers = {'User-Agent': get_random_user_agent()}
        params = {
            'q': query,
            'kl': region,
            'kad': 'ru_RU'
        }
        
        response = requests.get(
            'https://html.duckduckgo.com/html/',
            headers=headers,
            params=params,
            timeout=15
        )
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        results = soup.find_all('div', class_='result')
        
        formatted = []
        count = 0
        
        for result in results:
            if count >= max_results:
                break
                
            title_elem = result.find('a', class_='result__a')
            snippet_elem = result.find('a', class_='result__snippet')
            url_elem = result.find('a', class_='result__url')
            
            if not title_elem or not snippet_elem:
                continue
                
            title = title_elem.text.strip()
            snippet = snippet_elem.text.strip()[:500]
            url = url_elem['href'] if url_elem and 'href' in url_elem.attrs else '#'
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            if url.startswith('/'):
                url = 'https://duckduckgo.com' + url
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —Å–∞–π–¥–±–∞—Ä–µ
            with st.sidebar.expander(f"ü¶Ü {title}"):
                st.write(snippet)
                st.caption(f"URL: {url}")
            
            formatted.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {count+1} (DuckDuckGo HTML): {title}\n{snippet}\nURL: {url}\n")
            count += 1
            
        return "\n\n".join(formatted) if formatted else "DuckDuckGo HTML: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ DuckDuckGo HTML: {str(e)}"

def perform_search(query, region='ru-ru', max_results=5, max_snippet_length=800):
    """–£–ª—å—Ç—Ä–∞-–Ω–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback'–∞–º–∏"""
    st.sidebar.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
    start_time = time.time()
    
    # –ü–æ–ø—ã—Ç–∫–∞ 1: DuckDuckGo API
    try:
        headers = {'User-Agent': get_random_user_agent()}
        
        # –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        time.sleep(random.uniform(3.0, 6.0))
        
        with DDGS(headers=headers, timeout=25) as ddgs:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            search_results = ddgs.text(
                query,
                region=region,
                max_results=max_results,
                backend="api"  # –ü—Ä–æ–±—É–µ–º API –≤–º–µ—Å—Ç–æ Lite
            )
            
            if search_results:
                formatted = []
                for i, r in enumerate(search_results, 1):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
                    if 'body' not in r or not r['body'] or 'title' not in r or 'href' not in r:
                        continue
                    
                    snippet = r['body'][:500] + "..." if len(r['body']) > 500 else r['body']
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —Å–∞–π–¥–±–∞—Ä–µ
                    with st.sidebar.expander(f"üîç {r['title']}"):
                        st.write(snippet)
                        st.caption(f"URL: {r['href']}")
                    
                    body = r['body'][:max_snippet_length] + "..." if len(r['body']) > max_snippet_length else r['body']
                    formatted.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i} (DDG API): {r['title']}\n{body}\nURL: {r['href']}\n")
                
                if formatted:
                    st.sidebar.success(f"–ù–∞–π–¥–µ–Ω–æ {len(formatted)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {time.time()-start_time:.1f} —Å–µ–∫")
                    return "\n\n".join(formatted)
    except Exception as e:
        st.sidebar.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ DuckDuckGo API: {str(e)}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ 2: DuckDuckGo HTML
    try:
        time.sleep(random.uniform(2.0, 4.0))
        html_result = duckduckgo_html_search(query, region, max_results)
        if "–û—à–∏–±–∫–∞" not in html_result and "–Ω–µ –Ω–∞–π–¥–µ–Ω—ã" not in html_result:
            st.sidebar.success(f"DuckDuckGo HTML: –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {time.time()-start_time:.1f} —Å–µ–∫")
            return html_result
    except Exception as e:
        st.sidebar.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ DuckDuckGo HTML: {str(e)}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ 3: –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Mojeek
    try:
        st.sidebar.warning("‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫...")
        time.sleep(1.0)
        headers = {'User-Agent': get_random_user_agent()}
        params = {
            "q": query,
            "format": "json",
            "t": "web",
            "s": max_results
        }
        
        response = requests.get(
            "https://www.mojeek.com/search",
            headers=headers,
            params=params,
            timeout=15
        )
        response.raise_for_status()
        data = response.json()
        
        formatted = []
        for i, result in enumerate(data.get('results', [])[:max_results], 1):
            title = result.get('title', '')
            url = result.get('url', '')
            snippet = (result.get('desc', '')[:500] + "...") if result.get('desc') else ''
            
            with st.sidebar.expander(f"üåê {title}"):
                st.write(snippet)
                st.caption(f"URL: {url}")
            
            formatted.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i} (Mojeek): {title}\n{snippet}\nURL: {url}\n")
        
        if formatted:
            st.sidebar.success(f"Mojeek: –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {time.time()-start_time:.1f} —Å–µ–∫")
            return "\n\n".join(formatted)
    except Exception as e:
        st.sidebar.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Mojeek: {str(e)}")
    
    # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    st.sidebar.error("‚ùå –í—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    return "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
