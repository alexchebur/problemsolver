import streamlit as st
from duckduckgo_search import DDGS
import time
import random

def perform_search(query, region='ru-ru', max_results=8, max_snippet_length=3000, retries=3, delay=2):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    region - —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
    max_results - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    max_snippet_length - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–Ω–∏–ø–ø–µ—Ç–∞
    retries - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    delay - –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    results_formatted = ""
    attempts = 0
    
    while attempts < retries:
        try:
            with DDGS() as ddgs:
                results = []
                st.sidebar.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for r in ddgs.text(
                    query,
                    region=region,
                    max_results=max_results,
                    backend="lite"
                ):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–Ω–∏–ø–ø–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    snippet = r['body'][:500] + "..." if len(r['body']) > 500 else r['body']
                    results.append(r)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–∞–π–¥–±–∞—Ä–µ
                    with st.sidebar.expander(f"üìÑ {r['title']}"):
                        st.write(snippet)
                        st.caption(f"URL: {r['href']}")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                for i, r in enumerate(results, 1):
                    body = r['body'][:max_snippet_length] + "..." if len(r['body']) > max_snippet_length else r['body']
                    results_formatted += f"### –†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {r['title']}\n\n{body}\n\nURL: {r['href']}\n\n\n"
                
                return results_formatted
        
        except Exception as e:
            attempts += 1
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempts}/{retries}): {str(e)}"
            st.sidebar.error(error_msg)
            
            if attempts < retries:
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
                sleep_time = delay * (2 ** attempts) + random.uniform(0, 1)
                time.sleep(sleep_time)
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–µ–π
    st.sidebar.error("‚ùå –ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    return "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
