import streamlit as st
from duckduckgo_search import DDGS
import time
import random
import requests
from bs4 import BeautifulSoup

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö User-Agent —Å—Ç—Ä–æ–∫
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:126.0) Gecko/20100101 Firefox/126.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Safari/605.1.15",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0",
    "Mozilla/5.0 (Linux; Android 13; SM-S901B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.147 Mobile Safari/537.36",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1"
]

def get_random_user_agent():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π User-Agent"""
    return random.choice(USER_AGENTS)

def get_full_snippet(url):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–Ω–∏–ø–ø–µ—Ç–∞"""
    try:
        headers = {'User-Agent': get_random_user_agent()}
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for tag in soup(['script', 'style', 'header', 'footer', 'nav', 'aside']):
            tag.decompose()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_content = soup.find('main') or soup.find('article') or soup.body
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        text = main_content.get_text(separator=' ', strip=True)
        return text[:1000] + "..." if len(text) > 1000 else text
    
    except:
        return None

def perform_search(query, region='ru-ru', max_results=5, max_snippet_length=1000):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    st.sidebar.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
    start_time = time.time()
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –±—ç–∫–µ–Ω–¥—ã
    backends = ["lite", "api"]
    results = []
    
    for backend in backends:
        try:
            headers = {'User-Agent': get_random_user_agent()}
            
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            time.sleep(random.uniform(1.0, 3.0))
            
            with DDGS(headers=headers) as ddgs:
                search_results = ddgs.text(
                    query,
                    region=region,
                    max_results=max_results,
                    backend=backend
                )
                
                if not search_results:
                    continue
                    
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for r in search_results:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–Ω–∏–ø–ø–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    snippet = r.get('body', '')[:500] + "..." if len(r.get('body', '')) > 500 else r.get('body', '')
                    full_snippet = get_full_snippet(r.get('href', ''))
                    display_snippet = full_snippet if full_snippet else snippet
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    results.append({
                        'title': r.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        'snippet': display_snippet,
                        'url': r.get('href', '')
                    })
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —Å–∞–π–¥–±–∞—Ä–µ
                    with st.sidebar.expander(f"üîç {r.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"):
                        st.write(display_snippet)
                        st.caption(f"URL: {r.get('href', '')}")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                formatted = []
                for i, r in enumerate(results, 1):
                    body = r['snippet'][:max_snippet_length] + "..." if len(r['snippet']) > max_snippet_length else r['snippet']
                    formatted.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {r['title']}\n{body}\nURL: {r['url']}\n")
                
                st.sidebar.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {time.time()-start_time:.1f} —Å–µ–∫")
                return "\n\n".join(formatted)
                
        except Exception as e:
            st.sidebar.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±—ç–∫–µ–Ω–¥–µ {backend}: {str(e)}")
            time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    # –ï—Å–ª–∏ –≤—Å–µ –±—ç–∫–µ–Ω–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    st.sidebar.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫")
    return "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
